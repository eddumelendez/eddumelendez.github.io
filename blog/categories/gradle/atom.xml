<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | Eddú Meléndez]]></title>
  <link href="http://eddumelendez.github.io/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://eddumelendez.github.io/"/>
  <updated>2015-06-01T22:53:30-05:00</updated>
  <id>http://eddumelendez.github.io/</id>
  <author>
    <name><![CDATA[Eddú Meléndez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Start With Mule ESB]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/12/31/how-to-start-with-mule-esb/"/>
    <updated>2014-12-31T20:22:57-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/12/31/how-to-start-with-mule-esb</id>
    <content type="html"><![CDATA[<h2>What is an ESB?</h2>

<p>It&rsquo;s a software architecture. ESB or Enterprise Service Bus is a Enterprise Integration Pattern (EIP) solves the <code>spaghetti integration</code> pattern.</p>

<h2>What is Mule ESB?</h2>

<p>It is a Open Source Enterprise Service Bus (ESB), which allow to integrate lot of technologies.</p>

<p>Mule main parts:</p>

<ul>
<li>Component</li>
<li>Transport</li>
<li>Transformers</li>
<li>Inbound/Outbound Routers</li>
</ul>


<p>Mule also provide rich set of:</p>

<ul>
<li>Routers</li>
<li>Transformers</li>
<li>Filters</li>
</ul>


<h2>Using Maven</h2>

<p>Make sure you have set the Mulesoft&rsquo;s repository in <code>settings.xml</code></p>

<pre><code class="xml">&lt;repositories&gt;
  &lt;repository&gt;
    &lt;id&gt;mulesoft-release&lt;/id&gt;
    &lt;name&gt;Mulesoft Release Repository&lt;/name&gt;
    &lt;url&gt;https://repository.mulesoft.org/nexus/content/repositories/public/&lt;/url&gt;
  &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre>

<p>Now, you are able to run the following command your terminal:</p>

<pre><code>mvn mule-project-archetype:create -DartifactId=helloWorld -DmuleVersion=3.5.0
</code></pre>

<h2>Using Gradle</h2>

<p>Make sure you have a build.gradle file inside the folder with the following content:</p>

<pre><code>buildscript {
    dependencies {
        classpath group: 'org.mulesoft.build', name: 'mule-gradle-plugin', version: '1.1.0'
    }

    repositories {
        maven {
            url 'http://repository.mulesoft.org/releases'
        }
    }
}

apply plugin: 'mule'

mule.version = '3.5.0'

mule.muleEnterprise = false
</code></pre>

<p>After that you can execute:</p>

<pre><code>gradle initMuleProject
</code></pre>

<p>By default, <code>mule.muleEnterprise</code> is set to <code>true</code>.</p>

<p>For more information you can visit <a href="https://github.com/mulesoft-labs/mule-gradle-plugin">mule-gradle-plguin</a> documentation.</p>

<p>Using maven or gradle you will be able to see the project like this</p>

<p><img src="https://dl.dropboxusercontent.com/u/15671111/blog/mule-gradle.png" alt="" /></p>

<h2>Differences between maven and gradle plugin</h2>

<table>
<thead>
<tr>
<th> Maven        </th>
<th> Gradle      </th>
</tr>
</thead>
<tbody>
<tr>
<td> Provide <code>mule</code> packaging      </td>
<td> Provide <code>mule</code> plugin</td>
</tr>
<tr>
<td> Allow to deploy in local mule standalone </td>
<td> Allow to deploy in local mule standalone, Mule Management Console and Cloudhub</td>
</tr>
<tr>
<td>-</td>
<td>Allow to run application with a simple command</td>
</tr>
</tbody>
</table>


<h1>Testing</h1>

<p><code>mule-config.xml</code> is placed inside of <code>src/main/app</code>. Here you will find a http service which will return <code>Hello World!</code> message.</p>

<p>&#8220;`xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?></p>

<!-- created by the gradle mule plugin -->


<p><mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.4.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
  http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
  <flow name="mule-configFlow1" doc:name="mule-configFlow1">
    &lt;<a href="http:inbound-endpoint">http:inbound-endpoint</a> exchange-pattern=&ldquo;request-response&rdquo; host=&ldquo;localhost&rdquo; port=&ldquo;8081&rdquo; doc:name=&ldquo;HTTP&rdquo;/>
    <set-payload doc:name="Set Payload" value="Hello World!"/>
  </flow>
</mule>
&#8220;`</p>

<p>Then, proceed to write a test for the existing flow. As you can see response will be validated.</p>

<pre><code class="java">import org.hamcrest.core.Is;
import org.junit.Assert;
import org.junit.Test;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.tck.junit4.FunctionalTestCase;

public class MuleTest extends FunctionalTestCase {

  @Override
  protected String getConfigFile() {
    return "src/main/app/mule-config.xml";
  }

  @Test
  public void testMuleConfigFlow1() throws Exception {
    MuleClient client = muleContext.getClient();
    MuleMessage message = client.request("http://localhost:8081", 3000L);
    String payload = message.getPayloadAsString();
    Assert.assertThat(payload, Is.is("Hello World!"));
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Gradle]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/10/18/introduction-to-gradle/"/>
    <updated>2014-10-18T08:57:01-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/10/18/introduction-to-gradle</id>
    <content type="html"><![CDATA[<p><code>Gradle</code> is called the next generation of <strong>build automation</strong> and <strong>dependency management</strong>. If you have used <code>Ant</code> or <code>Maven</code> you know what that mean.</p>

<p><code>Gradle</code> is based on <code>Groovy</code> and has compatibility with existing tools like <code>Ant</code> and <code>Maven</code>.</p>

<p>The company behind this project is <strong>Gradleware</strong>.</p>

<h6>Build Automation</h6>

<p>As you know, manual tasks are error-prone and tedious. Take in mind that you are working in a project and you have to compile your code&hellip; manually!!! It&rsquo;s boring and you are spending time if you are doing this, Can you imaging running <code>javac</code> command for all your project and dependencies? and after that you need to package the artifact in a <code>jar</code> or <code>war</code>. <code>Ant</code> is the first tool which help developers to write a xml file with all the step to compile, copy, package artifacts. Currently, <code>Maven</code> have standardized all of this and it is charge of to run all the previous tasks and manage the dependencies.</p>

<h6>Dependency Management</h6>

<p>All the projects have dependencies with other projects, years ago and even now is a headache when you are copying and pasting jars inside your projects. To avoid this pain <code>maven</code> and <code>ivy</code> are tools to manage this.</p>

<h2>Getting Started</h2>

<p>It is really cool to see what amazing things you can do with <code>Gradle</code>. It allow us to work with <code>java</code>, <code>groovy</code> and <code>scala</code> projects too.</p>

<p>I really like the easy way to add tasks and manage the dependencies between them. Another good thing is the capability to extend the functionality in <code>Java</code> or <code>Groovy</code>.</p>

<p><code>Gradle</code> have the power run tasks in a new way: Gradle task name abbreviation. For example, if you have created a task called deployInLocalhost&hellip; run <code>gradle dIL</code> instead of<code>gradle deployInLocalhost</code> but make sure you have not another task with the same abbreviation.</p>

<h2>Gradle Wrapper</h2>

<p>I remember when I started using <code>maven</code>, I had downloaded some examples but that was not enough. I had to install <code>maven</code> in my local machine. To avoid install new runtime manually like I did, Gradle Wrapper has arrived to the rescue!!!</p>

<p>As a best practice, it is a good idea to have a wrapper in your project in order to avoid compatibility troubles or any other issues. To apply the wrapper configuration you just need to execute this command <strong>gradle wrapper</strong> and changes to your project will be applied, your wrapper will have the same version as your gradle runtime but you can change it.</p>

<h2>Gradle Daemon</h2>

<p>Gradle take time to up and run when task is executed. If you want to improve the performance, Gradle daemons is here to the rescue&hellip; to active it <strong>gradle &ndash;daemon</strong> and finalize the process <strong>gradle &ndash;stop</strong>. This is useful when you run unit test many times.</p>

<p><strong>Note:</strong> expire after 3 hours.</p>

<h2>Moving from Maven to Gradle</h2>

<p>Currently, you may are working with <code>maven</code> so if you want to try <code>gradle</code> without lost all your maven configuration you can run this command <strong>gradle maven2gradle</strong>. It will create the <code>build.gradle</code> and <code>settings.gradle</code> files with all the dependencies and configuration. Looks great, right? but as a new build automation tool, <code>gradle</code> is growing so if you have additional plugin configuration in your <code>pom.xml</code> this will not be migrated. Your project can live with both.</p>

<h2>Gradle Commands</h2>

<p>I will describe some useful commands but to get more information visit <a href="http://www.gradle.org/docs/current/userguide/gradle_command_line.html">online documentation</a>.</p>

<p>All those commands start with <code>gradle</code>: <code>gradle &lt;command&gt;</code></p>

<p>Commands:</p>

<p><strong>-v or &ndash;version</strong> -> display gradle version.</p>

<p><strong>tasks</strong> -> display tasks related to the project.</p>

<p><strong>-q</strong> -> show tasks output.</p>

<p><strong>-x</strong> or <strong>gradle &ndash;exclude-task</strong> -> exclude the execution of tasks defined.</p>

<p><strong>dependencies</strong> -> display project dependencies and how dependencies were solved.</p>

<p><strong>projects</strong> -> list all the project and subprojects.</p>

<p><strong>properties</strong> -> list all available properties in the project.</p>

<p><strong>-a</strong> or <strong>&ndash;no-rebuild</strong> -> it&rsquo;s used when you won&rsquo;t to rebuild a projects that you didn&rsquo;t change. It works if you are only changing files in a single project.</p>

<p><strong>&ndash;refresh-dependencies</strong> -> refresh project dependencies.</p>

<p><strong>-b</strong> or <strong>&ndash;build-file</strong> -> give the option to choose another build script.</p>

<p><strong>-Dtest.debug test</strong> -> debug test in port 5005</p>

<h2>Recommended Books</h2>

<ul>
<li><a href="http://www.manning.com/muschko/">Gradle in Action</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
