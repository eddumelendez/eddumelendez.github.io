<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Streams | Eddú Meléndez]]></title>
  <link href="http://eddumelendez.github.io/blog/categories/streams/atom.xml" rel="self"/>
  <link href="http://eddumelendez.github.io/"/>
  <updated>2015-04-14T23:39:16-05:00</updated>
  <id>http://eddumelendez.github.io/</id>
  <author>
    <name><![CDATA[Eddú Meléndez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[News About Java 8]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/10/30/news-about-java-8/"/>
    <updated>2014-10-30T22:09:19-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/10/30/news-about-java-8</id>
    <content type="html"><![CDATA[<p>Java 8 was released in March and many cool features have arrived in a functional programming style.</p>

<h2>Lambdas</h2>

<p>Lambdas has been used in other programming languages. In <code>java</code>, it&rsquo;s the new way to call <code>anonymous classes</code>.</p>

<p>If you have been Swing developer, you may have seen lot of this code. Example of <code>anonymous class</code>:</p>

<pre><code class="java">File[] directories = new File(System.getProperty("user.home")).listFiles(new FileFilter() {
           @Override
           public boolean accept(File pathname) {
               return pathname.isDirectory();
           }
       });
</code></pre>

<p>Below, you can see three approaches to use lambdas:</p>

<pre><code class="java">() -&gt; System.out.println("Hello lamdba");

//pass an object
customer -&gt; customer.getLastname();

//using blocks
() -&gt; {
  String greeting = "Hello lambda block";
  System.out.println(greeting);
}
</code></pre>

<p>Now, let write our first example using lambdas:</p>

<pre><code class="java">File[] directories = new File(System.getProperty("user.home"))
                .listFiles((File pathname) -&gt; pathname.isDirectory());
</code></pre>

<p>In this example, to move from <code>anonymous class</code> to <code>lambdas</code> there are two steps to do. As you can see the difference is inside of <code>listFiles</code> method. The first part of the lambda is the parameter of the method <code>accept</code> (File pathname) next the arrow (->) and finally the return statement (pathname.isDirectory()). If you want to add extra functionality inside of the lambda you can use block statements.</p>

<h2>Streams API</h2>

<p>The power to manage collections with readable code is here.</p>

<p>I will work in this example with my favourite books. So, we will print in the console only books that contains <em>&ldquo;o&rdquo;</em></p>

<p>Old fashionable way:</p>

<pre><code class="java">List&lt;Book&gt; books = new ArrayList&lt;&gt;();
books.add(BookBuilder.defaultValues().withId(1l).withTitle("Angel &amp; Demons").withIsbn("0-671-02735-2").build());

books.add(BookBuilder.defaultValues().withId(2l).withTitle("The Da Vinci Code").withIsbn("0-385-50420-9").build());

books.add(BookBuilder.defaultValues().withId(3l).withTitle("The Lost Symbol").withIsbn("978-0-385-50422-5").build());

books.add(BookBuilder.defaultValues().withId(4l).withTitle("Inferno").withIsbn("978-0-385-53785-8").build());

for(Book book : books){
  if (book.getTitle().contains("o")) {
    System.out.println(book.getTitle());
  }
}
</code></pre>

<p>Now we will use Stream API to rewrite the last part:</p>

<pre><code class="java">List&lt;String&gt; bookNames = books.stream()
.filter(book -&gt; book.getTitle().contains("o"))
.map(Book::getTitle).collect(Collectors.toList());
System.out.println(bookNames);
</code></pre>

<p>Both are doing the same thing but stream offers another great cool features like parallelStream or group function. Additionally, it is readable code and the <code>ciclomatic complexity</code> is reduced.</p>

<p>There are <code>eager</code> and <code>lazy</code> methods inside of Streams API.</p>

<ul>
<li>Eager, return some value or void. Ex: foreach, collect.</li>
<li>Lazy, return another stream. Ex: filter, map.</li>
</ul>


<p><strong>Note:</strong> Streams can be read just once. If you try to work with the same stream twice you will se an exception.</p>

<p>For more infomation about Streams visit the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html">official documentation</a>.</p>

<h2>Default Methods</h2>

<p>In java 8, there are big changes like this. Do you remember interfaces? The place where you define what to do and the class implementation define how.</p>

<p>Default methods has been used in the Java 8 API in order to add new functionality without break existing code. Take a look inside <code>Collection.java</code> you will se that <code>stream()</code> method is a default method.</p>

<p>If you have take a look inside of the API you can see that default method has body or define an action.</p>

<pre><code class="java">public interface Greeting {

  public default void welcome() {
    System.out.println("Hi, I am a default method.")
  }

}

class SpanishGreeting implements Greeting {

  @Override
  public void welcome() {
    System.out.println("Hola, soy un método por defecto.")
  }

}

class EnglishGreeting implements Greeting {

}
</code></pre>

<p>If we call welcome method from SpanishGreeting &ldquo;Hola, soy un método por defecto.&rdquo; will be printed but if you call the method from EnglishGreeting &ldquo;Hi, I am a default method.&rdquo; will be printed.</p>

<h2>Method References</h2>

<p>Everything can be well used or not, in the case of lambdas does nothing, just call the method you can use method references as a easy-to-read approach.</p>

<pre><code class="java">Customer::getFirstname //instead  customer -&gt; customer.getFirstname()
</code></pre>
]]></content>
  </entry>
  
</feed>
