<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | Eddú Meléndez]]></title>
  <link href="http://eddumelendez.github.io/blog/categories/maven/atom.xml" rel="self"/>
  <link href="http://eddumelendez.github.io/"/>
  <updated>2014-12-31T01:05:31-05:00</updated>
  <id>http://eddumelendez.github.io/</id>
  <author>
    <name><![CDATA[Eddú Meléndez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Start With Mule ESB]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/12/31/how-to-start-with-mule-esb/"/>
    <updated>2014-12-31T20:22:57-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/12/31/how-to-start-with-mule-esb</id>
    <content type="html"><![CDATA[<h2>What is an ESB?</h2>

<p>It&rsquo;s an architecture. ESB or Enterprise Service Bus is a Enterprise Integration Pattern (EIP) solves the <code>spaghetti integration</code> pattern.</p>

<h2>What is Mule ESB?</h2>

<p>It is a Open Source Enterprise Service Bus (ESB), which allow to integrate lot of technologies.</p>

<p>Mule main parts:</p>

<ul>
<li>Component</li>
<li>Transport</li>
<li>Transformers</li>
<li>Inbound/Outbound Routers</li>
</ul>


<p>Mule also provide rich set of:</p>

<ul>
<li>Routers</li>
<li>Transformers</li>
<li>Filters</li>
</ul>


<h2>Using Maven</h2>

<p>Make sure you have set the Mulesoft&rsquo;s repository in <code>settings.xml</code></p>

<p>```xml
<repositories>
  <repository></p>

<pre><code>&lt;id&gt;mulesoft-release&lt;/id&gt;
&lt;name&gt;Mulesoft Release Repository&lt;/name&gt;
&lt;url&gt;https://repository.mulesoft.org/nexus/content/repositories/public/&lt;/url&gt;
</code></pre>

<p>  </repository>
</repositories>
```</p>

<p>Now, you are able to run the following command your terminal:</p>

<p><code>
mvn mule-project-archetype:create -DartifactId=helloWorld -DmuleVersion=3.5.0
</code></p>

<h2>Using Gradle</h2>

<p>Make sure you have a build.gradle file inside the folder with the following content:</p>

<p>```
buildscript {</p>

<pre><code>dependencies {
    classpath group: 'org.mulesoft.build', name: 'mule-gradle-plugin', version: '1.1.0'
}

repositories {
    maven {
        url 'http://repository.mulesoft.org/releases'
    }
}
</code></pre>

<p>}</p>

<p>apply plugin: &lsquo;mule&rsquo;</p>

<p>mule.version = &lsquo;3.5.0&rsquo;</p>

<p>mule.muleEnterprise = false
```</p>

<p>After that you can execute:</p>

<p><code>
gradle initMuleProject
</code></p>

<p>By default, <code>mule.muleEnterprise</code> is set to <code>true</code>.</p>

<p>For more information you can visit <a href="https://github.com/mulesoft-labs/mule-gradle-plugin">mule-gradle-plguin</a> documentation.</p>

<p>Using maven or gradle you will be able to see the project like this</p>

<p>Project generated by Gradle<img src="https://dl.dropboxusercontent.com/u/15671111/blog/mule-gradle.png" alt="" /></p>

<h2>Differences between maven and gradle plugin</h2>

<table>
<thead>
<tr>
<th></th>
<th> Maven        </th>
<th> Gradle      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Provide <code>mule</code> packaging      </td>
<td> Provide <code>mule</code> plugin |</td>
</tr>
<tr>
<td></td>
<td> Allow to deploy in local mule standalone </td>
<td> Allow to deploy in local mule standalone, Mule Management Console and Cloudhub|</td>
</tr>
<tr>
<td></td>
<td>&ndash;</td>
<td>Allow to run application with a simple command|</td>
</tr>
</tbody>
</table>


<h1>Testing</h1>

<p><code>mule-config.xml</code> is placed inside of <code>src/main/app</code>. Here you will find a http service which will return <code>Hello Wodld!</code> message.</p>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?></p>

<!-- created by the gradle mule plugin -->


<p><mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.4.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
  http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
  <flow name="mule-configFlow1" doc:name="mule-configFlow1"></p>

<pre><code>&lt;http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" doc:name="HTTP"/&gt;
&lt;set-payload doc:name="Set Payload" value="Hello World!"/&gt;
</code></pre>

<p>  </flow>
</mule>
```</p>

<p>Then, proceed to write a test for the existing flow. As you can see response will be validated.</p>

<p>```java
import org.hamcrest.core.Is;
import org.junit.Assert;
import org.junit.Test;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.tck.junit4.FunctionalTestCase;</p>

<p>public class MuleTest extends FunctionalTestCase {</p>

<p>  @Override
  protected String getConfigFile() {</p>

<pre><code>return "src/main/app/mule-config.xml";
</code></pre>

<p>  }</p>

<p>  @Test
  public void testMuleConfigFlow1() throws Exception {</p>

<pre><code>MuleClient client = muleContext.getClient();
MuleMessage message = client.request("http://localhost:8081", 3000L);
String payload = message.getPayloadAsString();
Assert.assertThat(payload, Is.is("Hello World!"));
</code></pre>

<p>  }
}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins and Liquibase Working Together]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/30/jenkins-and-liquibase-working-together/"/>
    <updated>2014-08-30T02:03:53-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/30/jenkins-and-liquibase-working-together</id>
    <content type="html"><![CDATA[<p>I have talked about <a href="http://eddumelendez.github.io/blog/2014/08/11/database-change-management-liquibase">Database Change Management using Liquibase</a>.
Now, I will talk about the integration with Jenkins CI.</p>

<p>As you can see in the example of my previous post. In the <code>pom.xml</code> there are 3 profiles: <code>update</code>,<code>tag</code> and <code>rollback</code> which will be used by Jenkins.
The profile approach will be useful in our integration.</p>

<p>I am going to use <strong>Cloudbees</strong> (PaaS)</p>

<p><strong>1.</strong> First, you need to have an <a href="http://www.cloudbees.com/">Cloudbees</a> account.</p>

<p><strong>2.</strong> Click on <em>Databases</em> and then click <em>Add Database</em>.</p>

<p><strong>3.</strong> Create a liquibase_demo database.</p>

<p><strong>4.</strong> Click on <em>Builds</em>, Jenkins dashboard will be display.</p>

<p><strong>5.</strong> Create <em>New Job</em>.</p>

<p><strong>6.</strong> Put a name, choose <em>Build a free-style software project</em> option and then click <em>OK</em>.</p>

<p><strong>7.</strong> Now, let start to configure Jenkins&rsquo;s job. You will be able to see the image below
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-1.png" alt="" /></p>

<p><strong>8.</strong> Check <em>This build is parameterized</em> option. Then, click <em>Add Parameter</em>. Add the following parameters: <code>driver</code>, <code>url</code>, <code>username</code>, <code>password</code>, <code>changeLogFile</code>, <code>tag</code> and <code>action</code>.</p>

<p>  <code>driver</code>, <code>url</code>, <code>username</code>, <code>changeLogFile</code>, <code>tag</code> are <strong>String Parameter</strong>
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-2.png" alt="" /></p>

<p>  <code>password</code> is a <strong>Password Parameter</strong>.
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-3.png" alt="" /></p>

<p>  <code>action</code> is a <strong>Choice Parameter</strong> with the following options: <code>update</code>, <code>tag</code> and <code>rollback</code>
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-4.png" alt="" /></p>

<p><strong>9.</strong> Now, lets configure the Source Code Management. In this example, I have published the <a href="https://github.com/eddumelendez/liquibase-demo">demo</a> in GitHub.
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-5.png" alt="" /></p>

<p><strong>10.</strong> Now, go to <strong>Build</strong> section, click on <em>Add build step</em> and choose <em>Invoke top-level Maven targets</em>. Add the maven&rsquo;s goal and properties. Then, <em>Save</em>.</p>

<p>Maven Goal:</p>

<p><code>
mvn install -P$action
</code></p>

<p>Maven Properties:</p>

<p><code>
liquibase.driver=$driver
liquibase.username=$username
liquibase.password=$password
liquibase.url=$url
liquibase.changeLogFile=$changeLogFile
liquibase.rollbackTag=$tag
liquibase.tag=$tag
liquibase.promptOnNonLocalDatabase=false
</code></p>

<p>  If you remember, we have created parameters at the beginning of this post which are reusing in this part using <code>$</code> in order to do a dynamic job.
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-6.png" alt="" /></p>

<p><strong>11.</strong> Finally, click <em>Build with parameters</em>, test your job and enjoy.
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-7.png" alt="" /></p>

<p>Avoid risks and say good bye to manual tasks. For that reason, I love automation!</p>

<p><strong>Note:</strong> Liquibase can be used inside the java application using <a href="http://www.liquibase.org/documentation/spring.html">spring integration</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Change Management: Liquibase]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/11/database-change-management-liquibase/"/>
    <updated>2014-08-11T14:23:31-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/11/database-change-management-liquibase</id>
    <content type="html"><![CDATA[<p>Months ago, I published my first post about <a href="http://eddumelendez.github.io/blog/2014/03/27/database-change-management">Database Change Management</a>. So now, we will review <a href="http://www.liquibase.org">liquibase</a>.</p>

<p>In this blog, I am using sql scripts but there are another ways to work with Liquibase such as XML, YAML, JSON and you have to consider which it is the best option for you.</p>

<h2>What is Liquibase?</h2>

<p>It is an open source project which help us to manage the scripts execution into the database avoiding headaches during the SDLC.</p>

<h2>How liquibase works?</h2>

<p>First of all, you need to add the liquibase dependency and the database dependency (mysql in this post) into the pom.xml
After that, add scripts into the project. Then you must to register the script added into the liquibase configuration xml.</p>

<p>Take into account that if your script is not registered into the liquibase configuration xml, script will not be executed automatically.</p>

<p>Finally you can run the following maven goal <strong>liquibase:update</strong>, which will create two tables into the database. All the scripts executed against the database will be stored into the <strong>databasechangelog</strong> table.</p>

<h2>Pre-requisites</h2>

<ul>
<li>Java</li>
<li>Ant</li>
<li>Maven</li>
</ul>


<h2>Liquibase&rsquo;s Goals</h2>

<p>I will mention just some of them, the list below are the most used by me:</p>

<ul>
<li><code>rollback</code>: run all the scripts in the <strong>rollback</strong> section inside of dbchangelog configuration file.</li>
<li><code>tag</code>: mark the last script executed.</li>
<li><code>update</code>: run all the scripts in the <strong>sqlFile</strong> section inside of dbchangelog configuration file.</li>
<li><code>updateTestingRollback</code>: allow to test all the scripts. First, do the update and then rollback task. Make sure that all your scripts has a rollback section inside of dbchangelog configuration file. Otherwise, it doesn&rsquo;t work.</li>
</ul>


<blockquote><p><strong>Note:</strong> See all the liquibase&rsquo;s goals <a href="http://www.liquibase.org/documentation/maven/">here</a>.</p></blockquote>

<h2>Demo</h2>

<p>You can download the example <a href="https://github.com/eddumelendez/liquibase-demo">here</a>.</p>

<p>As you can see, there are <strong>param.properties</strong> which have the database connection and another values.</p>

<p><strong>1.</strong> Lets explain some key properties:</p>

<p><strong>changeLogFile</strong>, filename which contains scripts to be executed.</p>

<p><strong>tag</strong>, the name of tag.</p>

<p><strong>2.</strong> Run the ant task <strong>mvn_liquibase_update</strong>, it will create t_user table. Also, script executed will be registered into the <strong>databasechangelog</strong> table.</p>

<p><strong>3.</strong> Now, lets change <strong>changeLogFile</strong> value into the <strong>params.properties</strong> by db.changelog-1.1.0.xml</p>

<p><strong>4.</strong> Run the ant task <strong>mvn_liquibase_update</strong> again, it will create t_role table.</p>

<p>Now, the scripts execution can be automated using Jenkins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zuul: Application Configuration Management]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/11/zuul-application-configuration-management/"/>
    <updated>2014-08-11T01:23:06-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/11/zuul-application-configuration-management</id>
    <content type="html"><![CDATA[<p>Months ago I read the following blog <strong>Mule Meets Zuul</strong> <a href="http://blogs.mulesoft.org/mule-meets-zuul-centralized-properties-management-part-1/">Part I</a> | <a href="http://blogs.mulesoft.org/mule-meets-zuul-centralized-properties-management-part-2/">Part II</a> at <a href="http://blogs.mulesoft.org">Mulesoft&rsquo;s blog</a>
and Zuul caught my attention.</p>

<h2>What is the problem?</h2>

<p>It is a headache when you have to lead with a lot of property files and even worst when you have many environments.</p>

<h2>What is Zuul?</h2>

<p>Zuul is an open source web application which centralize and manage property files configuration.</p>

<h2>What can I do?</h2>

<ul>
<li>Create environments</li>
<li>Upload property files</li>
<li>Create new entries</li>
<li>Clone property files between environments</li>
<li>Group property files in folders</li>
<li>Encryption support</li>
</ul>


<h2>Steps to install Zuul</h2>

<p>Zuul can integrate with Google, Yahoo, LDAP and Active Directory.</p>

<p>Here the steps to set up Zuul against LDAP.</p>

<p><strong>1.</strong> Install <a href="http://docs.adaptivecomputing.com/viewpoint/hpc/Content/topics/1-setup/installSetup/settingUpOpenLDAPOnCentos6.htm">OpenLDAP</a>.</p>

<p><strong>2.</strong> Load this <a href="https://dl.dropboxusercontent.com/u/15671111/blog/ldap-data.ldif">file</a> into the LDAP.</p>

<p><strong>3.</strong> Instal Mysql</p>

<p><code>
yum install-y mysql-server mysql-devel
chkconfig mysqld on
service mysqld start
</code></p>

<p><strong>4.</strong> Create zuul database.</p>

<p><strong>5.</strong> Download  <a href="http://www.devnull.org/zuul">Zuul</a>.</p>

<p><strong>6.</strong> Set this parameters at:</p>

<p>   <strong>Unix:</strong> %TOMCAT_HOME%/bin/catalina.sh</p>

<p><code>
export JAVA_OPTS=-Dspring.profiles.active="security-ldap"
</code></p>

<p>   <strong>Windows:</strong> %TOMCAT_HOME%/bin/catalina.bat</p>

<p><code>
set JAVA_OPTS=-Dspring.profiles.active="security-ldap"
</code></p>

<p><strong>7.</strong> Add database driver into <strong>%TOMCAT_HOME%/lib</strong>.</p>

<p><strong>8.</strong> Copy ldap.properties and zuul-data-config.properties from <strong>zuul/WEB-INF/classes/examples</strong> to <strong>%TOMCAT_HOME%/lib</strong>.</p>

<p><strong>9.</strong> Modify ldap.properties
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ldap.properties</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">ldap.url</span><span class="o">=</span><span class="s">ldap://localhost:389</span>
</span><span class='line'><span class="na">ldap.username</span><span class="o">=</span><span class="s">cn=Manager,dc=example,dc=com</span>
</span><span class='line'><span class="na">ldap.password</span><span class="o">=</span><span class="s">p@ssw0rd</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_SYSTEM_ADMIN</span><span class="o">=</span><span class="s">CN=Zuul System Admins,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_ADMIN</span><span class="o">=</span><span class="s">CN=Zuul Admins,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_USER</span><span class="o">=</span><span class="s">CN=Zuul Users,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.group.search.base</span><span class="o">=</span><span class="s">OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.group.role.attribute</span><span class="o">=</span><span class="s">entryDN</span>
</span><span class='line'><span class="na">ldap.group.filter</span><span class="o">=</span><span class="s">member={0}</span>
</span><span class='line'><span class="na">ldap.user.search.base</span><span class="o">=</span><span class="s">OU=Users,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.user.search.filter</span><span class="o">=</span><span class="s">uid={0}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>10.</strong> Start tomcat and zuul application will create the database tables using <a href="http://www.liquibase.org">liquibase</a>.</p>

<p>Now, you have Zuul application ready to use.</p>

<p>Create a property in dev environment named <strong>myproperty</strong></p>

<p>Download <a href="https://github.com/eddumelendez/zuul-demo">Zuul demo</a></p>

<p>Now run mvn test, you will get the value from Zuul Service.</p>

<h2>Screenshots</h2>

<p>Create new property option.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-1.png" alt="" /></p>

<p>Create new property view.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-2.png" alt="" /></p>

<p>Property created.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-3.png" alt="" /></p>

<p>Property view and ready to add key and values.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-4.png" alt="" /></p>

<p>Adding new property.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-5.png" alt="" /></p>

<p>Property created in DEV environment.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-6.png" alt="" /></p>

<p>Key Management option.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-7.png" alt="" /></p>

<p>Key Management view.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-8.png" alt="" /></p>

<p>Changing password.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-9.png" alt="" /></p>

<p>You can also create groups.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-10.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded Database Compatibility]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/03/27/embedded-database-compatibility/"/>
    <updated>2014-03-27T22:01:18-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/03/27/embedded-database-compatibility</id>
    <content type="html"><![CDATA[<p>Some weeks ago I was watching a video about <a href="https://www.youtube.com/watch?v=LYVJ69h76nw">Spring Testing</a>, one thing that called my attention was one feature about embedded databases. It is about compatibility with other databases.</p>

<p>From my side, this feature is really useful because when I started using embedded database in my tests I had to change some types or remove lines in my script due to there are not supported (At that time, I didn&rsquo;t know about it)</p>

<p>Lines below you can see how to setup <strong>MYSQL</strong> compatibility into <strong>HSQL</strong> and <strong>H2</strong> databases, both for testing purpose. Also, you can see the dependencies if you are using maven projects.</p>

<h2>HSQL</h2>

<p>You can review this <a href="http://hsqldb.org/doc/guide/dbproperties-chapt.html">link</a> for more information.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>script.sql</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="k">DATABASE</span> <span class="k">SQL</span> <span class="n">SYNTAX</span> <span class="n">MYS</span> <span class="k">TRUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>pom.xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml+evoque'><span class='line'><span class="nt">&lt;dependency&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>org.hsqldb<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>hsqldb<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>2.2.8<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>scope<span class="ni">&amp;gt;</span>test<span class="ni">&amp;lt;</span>/scope<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>H2</h2>

<p>You can review this <a href="http://www.h2database.com/html/features.html#compatibility">link</a> for more information.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>script.sql</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="k">MODE</span> <span class="n">MySQL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>pom.xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml+evoque'><span class='line'><span class="nt">&lt;dependency&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>groupId<span class="ni">&amp;gt;</span>com.h2database<span class="ni">&amp;lt;</span>/groupId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>artifactId<span class="ni">&amp;gt;</span>h2<span class="ni">&amp;lt;</span>/artifactId<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>version<span class="ni">&amp;gt;</span>1.3.175<span class="ni">&amp;lt;</span>/version<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>scope<span class="ni">&amp;gt;</span>test<span class="ni">&amp;lt;</span>/scope<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
