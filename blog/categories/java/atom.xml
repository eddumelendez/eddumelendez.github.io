<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Eddú Meléndez]]></title>
  <link href="http://eddumelendez.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://eddumelendez.github.io/"/>
  <updated>2015-05-27T01:16:47-05:00</updated>
  <id>http://eddumelendez.github.io/</id>
  <author>
    <name><![CDATA[Eddú Meléndez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[News About Java 8]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/10/30/news-about-java-8/"/>
    <updated>2014-10-30T22:09:19-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/10/30/news-about-java-8</id>
    <content type="html"><![CDATA[<p>Java 8 was released in March and many cool features have arrived in a functional programming style.</p>

<h2>Lambdas</h2>

<p>Lambdas has been used in other programming languages. In <code>java</code>, it&rsquo;s the new way to call <code>anonymous classes</code>.</p>

<p>If you have been Swing developer, you may have seen lot of this code. Example of <code>anonymous class</code>:</p>

<pre><code class="java">File[] directories = new File(System.getProperty("user.home")).listFiles(new FileFilter() {
           @Override
           public boolean accept(File pathname) {
               return pathname.isDirectory();
           }
       });
</code></pre>

<p>Below, you can see three approaches to use lambdas:</p>

<pre><code class="java">() -&gt; System.out.println("Hello lamdba");

//pass an object
customer -&gt; customer.getLastname();

//using blocks
() -&gt; {
  String greeting = "Hello lambda block";
  System.out.println(greeting);
}
</code></pre>

<p>Now, let write our first example using lambdas:</p>

<pre><code class="java">File[] directories = new File(System.getProperty("user.home"))
                .listFiles((File pathname) -&gt; pathname.isDirectory());
</code></pre>

<p>In this example, to move from <code>anonymous class</code> to <code>lambdas</code> there are two steps to do. As you can see the difference is inside of <code>listFiles</code> method. The first part of the lambda is the parameter of the method <code>accept</code> (File pathname) next the arrow (->) and finally the return statement (pathname.isDirectory()). If you want to add extra functionality inside of the lambda you can use block statements.</p>

<h2>Streams API</h2>

<p>The power to manage collections with readable code is here.</p>

<p>I will work in this example with my favourite books. So, we will print in the console only books that contains <em>&ldquo;o&rdquo;</em></p>

<p>Old fashionable way:</p>

<pre><code class="java">List&lt;Book&gt; books = new ArrayList&lt;&gt;();
books.add(BookBuilder.defaultValues().withId(1l).withTitle("Angel &amp; Demons").withIsbn("0-671-02735-2").build());

books.add(BookBuilder.defaultValues().withId(2l).withTitle("The Da Vinci Code").withIsbn("0-385-50420-9").build());

books.add(BookBuilder.defaultValues().withId(3l).withTitle("The Lost Symbol").withIsbn("978-0-385-50422-5").build());

books.add(BookBuilder.defaultValues().withId(4l).withTitle("Inferno").withIsbn("978-0-385-53785-8").build());

for(Book book : books){
  if (book.getTitle().contains("o")) {
    System.out.println(book.getTitle());
  }
}
</code></pre>

<p>Now we will use Stream API to rewrite the last part:</p>

<pre><code class="java">List&lt;String&gt; bookNames = books.stream()
.filter(book -&gt; book.getTitle().contains("o"))
.map(Book::getTitle).collect(Collectors.toList());
System.out.println(bookNames);
</code></pre>

<p>Both are doing the same thing but stream offers another great cool features like parallelStream or group function. Additionally, it is readable code and the <code>ciclomatic complexity</code> is reduced.</p>

<p>There are <code>eager</code> and <code>lazy</code> methods inside of Streams API.</p>

<ul>
<li>Eager, return some value or void. Ex: foreach, collect.</li>
<li>Lazy, return another stream. Ex: filter, map.</li>
</ul>


<p><strong>Note:</strong> Streams can be read just once. If you try to work with the same stream twice you will se an exception.</p>

<p>For more infomation about Streams visit the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html">official documentation</a>.</p>

<h2>Default Methods</h2>

<p>In java 8, there are big changes like this. Do you remember interfaces? The place where you define what to do and the class implementation define how.</p>

<p>Default methods has been used in the Java 8 API in order to add new functionality without break existing code. Take a look inside <code>Collection.java</code> you will se that <code>stream()</code> method is a default method.</p>

<p>If you have take a look inside of the API you can see that default method has body or define an action.</p>

<pre><code class="java">public interface Greeting {

  public default void welcome() {
    System.out.println("Hi, I am a default method.")
  }

}

class SpanishGreeting implements Greeting {

  @Override
  public void welcome() {
    System.out.println("Hola, soy un método por defecto.")
  }

}

class EnglishGreeting implements Greeting {

}
</code></pre>

<p>If we call welcome method from SpanishGreeting &ldquo;Hola, soy un método por defecto.&rdquo; will be printed but if you call the method from EnglishGreeting &ldquo;Hi, I am a default method.&rdquo; will be printed.</p>

<h2>Method References</h2>

<p>Everything can be well used or not, in the case of lambdas does nothing, just call the method you can use method references as a easy-to-read approach.</p>

<pre><code class="java">Customer::getFirstname //instead  customer -&gt; customer.getFirstname()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaOne 2014]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/10/05/javaone-2014/"/>
    <updated>2014-10-05T19:39:37-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/10/05/javaone-2014</id>
    <content type="html"><![CDATA[<p>This year I had the opportunity to attend at JavaOne 2014 in San Francisco, California. It has been a really good experience to me.</p>

<p>In the JavaHub, I could take a look about:</p>

<ul>
<li>Mission Control.</li>
<li>3D Modeling and Printing, using Java FX.</li>
<li>New features in Netbeans, which allow us to migrate from older java versions to java 8 and use Streams.</li>
<li>Internet of Things, using Java Embedded and Raspberry Pi.</li>
<li>Hackergarten, the place where you can contribute in open source projects talking with the experts.</li>
</ul>


<p>Some companies were present in this event such as:
Cloudbees, GitHub, Gradleware, Hazelcast, JetBrains, JFrog, Liferay, O&#8217;Reilly, Pivotal, RedHat, Sonatype, Vaadin, Zeroturnaround.</p>

<p>Also, had the chance to meet:</p>

<ul>
<li>Anton Arhipov - <a href="https://twitter.com/antonarhipov">@antonarhipov</a>, JRebel and XRebel Product Manager at Zeroturnaround.</li>
<li>Arun Gupta - <a href="https://twitter.com/arungupta">@arungupta</a>, Director of Developer Advocacy at Red Hat and Author of Java EE 7 Essentials.</li>
<li>Benjamin Muschko - <a href="https://twitter.com/bmuschko">@bmuschko</a>, Principal Engineer at Gradleware and Author of Gradle in Action.</li>
<li>John Ferguson - <a href="https://twitter.com/wakaleo">@wakaleo</a>, Author of Java Power Tools, Jenkins: The Definitive Guide and BDD in Action.</li>
<li>Josh Long - <a href="https://twitter.com/starbuxman">@starbuxman</a>, Spring Developer Advocate.</li>
<li>Phill Weeb - <a href="https://twitter.com/phillip_webb">@phillip_webb</a>, Spring Framework committer and co-lead of Spring Boot.</li>
</ul>


<p>Below, are the sessions I found most interesting:</p>

<p>Sunday</p>

<ul>
<li>Introduction to Java 8: JVM, Language, and Platform.</li>
<li>Starting a JUGgernaut: How to Start and Rapidly Grow Your JUG.</li>
<li>Java Strategy and Technical Keynotes.</li>
</ul>


<p>Monday</p>

<ul>
<li>Hadoop for Java Developers. <a href="http://goo.gl/f2CwNz">http://goo.gl/f2CwNz</a></li>
<li>Next Step in Automation: Elastic Build Environment.</li>
<li>Programming with Streams in Java 8.</li>
</ul>


<p>Tuesday</p>

<ul>
<li>Devoxx4Kids for Parents.</li>
<li>Functional UIs with Java 8 and Vaadin.</li>
<li>Building a Continuous Delivery Pipeline with Gradle and Jenkins.</li>
</ul>


<p>Wednesday</p>

<ul>
<li>Continuous Delivery and Zero Downtime: What Your Architecture Needs to Succeed.</li>
<li>Apache TomEE, Java EE Web Profile, and More on Tomcat.</li>
<li>REST Assured: Hypermedia APIs with Spring MVC.</li>
</ul>


<p>Tuesday</p>

<ul>
<li>The Deploy Factory: Open Source Tools for Java Deployment.</li>
<li>Run Java Applications with Docker on the Raspberry Pi and Other Platforms.</li>
</ul>


<p><strong>Java 8</strong> was the main topic during this party, everyone talked about it. As a Venkat Subramaniam said in his talk:</p>

<blockquote><p>Java arrived later with lambdas but arrived with the desserts (Streams)</p></blockquote>

<p><strong>MVC 1.0</strong> part of <strong>JEE 8</strong> had place at JavaOne&hellip; in my opinion looks like Spring MVC but good to know that good things have been adopted.</p>

<p><strong>JavaOne</strong> is the best place to meet people, authors, learn new things, get stuff like raspberry pi, books and t-shirts and drink a beer.</p>

<p>Duke and me<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-1.jpg" alt="" /></p>

<p>Keynote<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-2.jpg" alt="" /></p>

<p>Duke<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-3.jpg" alt="" /></p>

<p>Duke Awards<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-4.jpg" alt="" /></p>

<p>Josh Long and me<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-5.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zuul: Application Configuration Management]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/11/zuul-application-configuration-management/"/>
    <updated>2014-08-11T01:23:06-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/11/zuul-application-configuration-management</id>
    <content type="html"><![CDATA[<p>Months ago I read the following blog <strong>Mule Meets Zuul</strong> <a href="http://blogs.mulesoft.org/mule-meets-zuul-centralized-properties-management-part-1/">Part I</a> | <a href="http://blogs.mulesoft.org/mule-meets-zuul-centralized-properties-management-part-2/">Part II</a> at <a href="http://blogs.mulesoft.org">Mulesoft&rsquo;s blog</a>
and Zuul caught my attention.</p>

<h2>What is the problem?</h2>

<p>It is a headache when you have to lead with a lot of property files and even worst when you have many environments.</p>

<h2>What is Zuul?</h2>

<p>Zuul is an open source web application which centralize and manage property files configuration.</p>

<h2>What can I do?</h2>

<ul>
<li>Create environments</li>
<li>Upload property files</li>
<li>Create new entries</li>
<li>Clone property files between environments</li>
<li>Group property files in folders</li>
<li>Encryption support</li>
</ul>


<h2>Steps to install Zuul</h2>

<p>Zuul can integrate with Google, Yahoo, LDAP and Active Directory.</p>

<p>Here the steps to set up Zuul against LDAP.</p>

<p><strong>1.</strong> Install <a href="http://docs.adaptivecomputing.com/viewpoint/hpc/Content/topics/1-setup/installSetup/settingUpOpenLDAPOnCentos6.htm">OpenLDAP</a>.</p>

<p><strong>2.</strong> Load this <a href="https://dl.dropboxusercontent.com/u/15671111/blog/ldap-data.ldif">file</a> into the LDAP.</p>

<p><strong>3.</strong> Instal Mysql</p>

<pre><code>yum install-y mysql-server mysql-devel
chkconfig mysqld on
service mysqld start
</code></pre>

<p><strong>4.</strong> Create zuul database.</p>

<p><strong>5.</strong> Download  <a href="http://www.devnull.org/zuul">Zuul</a>.</p>

<p><strong>6.</strong> Set this parameters at:</p>

<p>   <strong>Unix:</strong> %TOMCAT_HOME%/bin/catalina.sh</p>

<pre><code>export JAVA_OPTS=-Dspring.profiles.active="security-ldap"
</code></pre>

<p>   <strong>Windows:</strong> %TOMCAT_HOME%/bin/catalina.bat</p>

<pre><code>set JAVA_OPTS=-Dspring.profiles.active="security-ldap"
</code></pre>

<p><strong>7.</strong> Add database driver into <strong>%TOMCAT_HOME%/lib</strong>.</p>

<p><strong>8.</strong> Copy ldap.properties and zuul-data-config.properties from <strong>zuul/WEB-INF/classes/examples</strong> to <strong>%TOMCAT_HOME%/lib</strong>.</p>

<p><strong>9.</strong> Modify ldap.properties
<figure class='code'><figcaption><span>ldap.properties</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">ldap.url</span><span class="o">=</span><span class="s">ldap://localhost:389</span>
</span><span class='line'><span class="na">ldap.username</span><span class="o">=</span><span class="s">cn=Manager,dc=example,dc=com</span>
</span><span class='line'><span class="na">ldap.password</span><span class="o">=</span><span class="s">p@ssw0rd</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_SYSTEM_ADMIN</span><span class="o">=</span><span class="s">CN=Zuul System Admins,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_ADMIN</span><span class="o">=</span><span class="s">CN=Zuul Admins,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_USER</span><span class="o">=</span><span class="s">CN=Zuul Users,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.group.search.base</span><span class="o">=</span><span class="s">OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.group.role.attribute</span><span class="o">=</span><span class="s">entryDN</span>
</span><span class='line'><span class="na">ldap.group.filter</span><span class="o">=</span><span class="s">member={0}</span>
</span><span class='line'><span class="na">ldap.user.search.base</span><span class="o">=</span><span class="s">OU=Users,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.user.search.filter</span><span class="o">=</span><span class="s">uid={0}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>10.</strong> Start tomcat and zuul application will create the database tables using <a href="http://www.liquibase.org">liquibase</a>.</p>

<p>Now, you have Zuul application ready to use.</p>

<p>Create a property in dev environment named <strong>myproperty</strong></p>

<p>Download <a href="https://github.com/eddumelendez/zuul-demo">Zuul demo</a></p>

<p>Now run mvn test, you will get the value from Zuul Service.</p>

<h2>Screenshots</h2>

<p>Create new property option.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-1.png" alt="" /></p>

<p>Create new property view.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-2.png" alt="" /></p>

<p>Property created.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-3.png" alt="" /></p>

<p>Property view and ready to add key and values.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-4.png" alt="" /></p>

<p>Adding new property.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-5.png" alt="" /></p>

<p>Property created in DEV environment.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-6.png" alt="" /></p>

<p>Key Management option.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-7.png" alt="" /></p>

<p>Key Management view.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-8.png" alt="" /></p>

<p>Changing password.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-9.png" alt="" /></p>

<p>You can also create groups.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-10.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
