<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Api | Eddú Meléndez]]></title>
  <link href="http://eddumelendez.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://eddumelendez.github.io/"/>
  <updated>2015-05-27T01:16:47-05:00</updated>
  <id>http://eddumelendez.github.io/</id>
  <author>
    <name><![CDATA[Eddú Meléndez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RAML: Designing an API]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/09/02/raml-designing-an-api/"/>
    <updated>2014-09-02T23:28:31-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/09/02/raml-designing-an-api</id>
    <content type="html"><![CDATA[<p>As a developers, every day we are working coding many APIs.
But, <em>what about design?</em> Sometimes due to the project schedule, too much requirements and even the lack of knowledge about what is <code>REST</code>; developers forget about the design of API.<br/>
Months ago I was surfing on the internet, don&rsquo;t remember where but I read:</p>

<blockquote><p><code>REST</code>is more than work with <code>xml</code> or <code>json</code>.</p></blockquote>

<p>And that&rsquo;s true. So, I researched more about REST and learned lot of things.</p>

<h2>What RAML is?</h2>

<p><code>RESTful API Modeling Language</code> allow us to design, describe, define the API. It&rsquo;s human readable and it is visible to everyone.</p>

<p>That&rsquo;s pretty cool, we can design the API and document as well.</p>

<h2>Security</h2>

<p><code>RAML</code> supports authentication:</p>

<ul>
<li>Basic authentication</li>
<li>Digest authentication</li>
<li>Oauth 1.0</li>
<li>Oauth 2.0</li>
</ul>


<h2>Book Store API</h2>

<p>In the example below, I have designed a Books Store API working my favourite book list.
The API allow me to Create, Read, Update and Delete books. A simple CRUD operation which is represents by HTTP methods.</p>

<table>
<thead>
<tr>
<th><strong>OPERATION</strong> </th>
<th> <strong>HTTP METHODS</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CREATE        </td>
<td> POST</td>
</tr>
<tr>
<td>READ          </td>
<td> GET</td>
</tr>
<tr>
<td>UPDATE        </td>
<td> PUT</td>
</tr>
<tr>
<td>DELETE        </td>
<td> DELETE</td>
</tr>
</tbody>
</table>


<pre><code>#%RAML 0.8
---
title: Book Store API
version: 1.0
baseUri: http://localhost:8081/api
/books:
  displayName: Books Catalog
  get:
    responses:
      200:
        body:
          application/json:
            example: |
                {
                  "bookId": 1,
                  "title": "Angel &amp; Demons",
                  "isbn": "0-671-02735-2",
                  "authors": [
                    "Dan Brown"
                  ]
                },
                {
                  "bookId": 2,
                  "title": "The Da Vinci Code",
                  "isbn": "0-385-50420-9",
                  "authors": [
                    "Dan Brown"
                  ]
                },
                {
                  "bookId": 3,
                  "title": "The Lost Symbol",
                  "isbn": "978-0-385-50422-5",
                  "authors": [
                    "Dan Brown"
                  ]
                },
                {
                  "bookId": 4,
                  "title": "Inferno",
                  "isbn": "978-0-385-53785-8",
                  "authors": [
                    "Dan Brown"
                  ]
                }
  post:
    body:
      application/json:
        example: |  
            {
             "title": "Deception Point",
             "isbn": "0-671-02738-7",
             "authors": [
              "Dan Brown"
             ]
            }
    responses:
      201:
        description: Book has been successfully created.
      409:
        description: Book already exists.
  /{bookId}:
    displayName: Book
    uriParameters:
      bookId:
        description: |
          Book Identifier
        required: true
    get:
      description: Retrieve book-related information.
      responses:
        200:
          body:
            application/json:
              example:  |
                {
                  "bookId": 1,
                  "title": "Angel &amp; Demons",
                  "isbn": "0-671-02735-2",
                  "authors": [
                    "Dan Brown"
                  ]  
                }
    put:
      description: Update book information.
      body:
         application/json:
          example: |  
            {
             "title": "Inferno",
             "isbn": "978-0-385-53785-8",
             "authors": [
              "Dan Brown"
             ]
            }
      responses:
        204:
          description: |
            The book has been successfully updated.
        404:
          description: |
            Unable to find book with that identifier.
    delete:
      description: Remove book from the catalog.
      responses:
        204:
          description: |
            The book has been successfully removed.
        404:
          description: |
            Unable to find book with that identifier.
</code></pre>

<p>As you can see, the Book Store API have five services:</p>

<ul>
<li>GET <a href="http://localhost:8081/api/books">http://localhost:8081/api/books</a></li>
<li>POST <a href="http://localhost:8081/api/books">http://localhost:8081/api/books</a></li>
<li>GET <a href="http://localhost:8081/api/books/{bookId}">http://localhost:8081/api/books/{bookId}</a></li>
<li>PUT <a href="http://localhost:8081/api/books/{bookId}">http://localhost:8081/api/books/{bookId}</a></li>
<li>DELETE <a href="http://localhost:8081/api/books/{bookId}">http://localhost:8081/api/books/{bookId}</a></li>
</ul>


<p>Learn more about <a href="http://httpstatus.es/">HTTP Status</a></p>

<h2>Platforms and Tools</h2>

<ul>
<li><strong>Mulesoft</strong> provides an <a href="https://anypoint.mulesoft.com/#/signup">API Platform</a> and <a href="http://www.mulesoft.org/documentation/display/current/APIkit+Tutorial">APIkit</a>.</li>
<li><a href="https://github.com/kevinrenskers/raml2html">raml2html</a>, transform raml file to html.</li>
<li><a href="https://github.com/mulesoft/jaxrs-to-raml/">jaxrs-to-raml</a>, generate raml file to existing JAX-RS services. It has been updated today, JAX-RS 2.0 Asynchronous Responses is now supported!!!</li>
</ul>


<p>There are more RAML projects <a href="http://raml.org/projects.html">here</a>.</p>

<h2>Resources</h2>

<p>There are a lot of resources about REST, how to write a good API, some of them are:</p>

<ul>
<li><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf">Roy Thomas Fielding&rsquo;s Dissertation</a></li>
<li><a href="http://blogs.mulesoft.org/designing-restful-api-longevity/">Designing your RESTful API for Longevity</a></li>
<li><a href="https://spring.io/blog/2013/12/02/springone2gx-2013-replay-rest-ful-api-design">SpringOne2GX 2013 Replay: REST-ful API Design</a></li>
<li><a href="http://spring.io/blog/2014/01/14/springone2gx-2013-replay-rest-ful-api-evolution">SpringOne2GX 2013 Replay: REST-Ful API Evolution</a></li>
<li><a href="http://softwaregarden.io/rest-api-best-practices-reloaded/">Rest API Best(?) Practices Reloaded</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
