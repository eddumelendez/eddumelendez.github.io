<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mule | Eddú Meléndez]]></title>
  <link href="http://eddumelendez.github.io/blog/categories/mule/atom.xml" rel="self"/>
  <link href="http://eddumelendez.github.io/"/>
  <updated>2014-12-31T02:01:01-05:00</updated>
  <id>http://eddumelendez.github.io/</id>
  <author>
    <name><![CDATA[Eddú Meléndez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Start With Mule ESB]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/12/31/how-to-start-with-mule-esb/"/>
    <updated>2014-12-31T20:22:57-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/12/31/how-to-start-with-mule-esb</id>
    <content type="html"><![CDATA[<h2>What is an ESB?</h2>

<p>It&rsquo;s a software architecture. ESB or Enterprise Service Bus is a Enterprise Integration Pattern (EIP) solves the <code>spaghetti integration</code> pattern.</p>

<h2>What is Mule ESB?</h2>

<p>It is a Open Source Enterprise Service Bus (ESB), which allow to integrate lot of technologies.</p>

<p>Mule main parts:</p>

<ul>
<li>Component</li>
<li>Transport</li>
<li>Transformers</li>
<li>Inbound/Outbound Routers</li>
</ul>


<p>Mule also provide rich set of:</p>

<ul>
<li>Routers</li>
<li>Transformers</li>
<li>Filters</li>
</ul>


<h2>Using Maven</h2>

<p>Make sure you have set the Mulesoft&rsquo;s repository in <code>settings.xml</code></p>

<p>```xml
<repositories>
  <repository></p>

<pre><code>&lt;id&gt;mulesoft-release&lt;/id&gt;
&lt;name&gt;Mulesoft Release Repository&lt;/name&gt;
&lt;url&gt;https://repository.mulesoft.org/nexus/content/repositories/public/&lt;/url&gt;
</code></pre>

<p>  </repository>
</repositories>
```</p>

<p>Now, you are able to run the following command your terminal:</p>

<p><code>
mvn mule-project-archetype:create -DartifactId=helloWorld -DmuleVersion=3.5.0
</code></p>

<h2>Using Gradle</h2>

<p>Make sure you have a build.gradle file inside the folder with the following content:</p>

<p>```
buildscript {</p>

<pre><code>dependencies {
    classpath group: 'org.mulesoft.build', name: 'mule-gradle-plugin', version: '1.1.0'
}

repositories {
    maven {
        url 'http://repository.mulesoft.org/releases'
    }
}
</code></pre>

<p>}</p>

<p>apply plugin: &lsquo;mule&rsquo;</p>

<p>mule.version = &lsquo;3.5.0&rsquo;</p>

<p>mule.muleEnterprise = false
```</p>

<p>After that you can execute:</p>

<p><code>
gradle initMuleProject
</code></p>

<p>By default, <code>mule.muleEnterprise</code> is set to <code>true</code>.</p>

<p>For more information you can visit <a href="https://github.com/mulesoft-labs/mule-gradle-plugin">mule-gradle-plguin</a> documentation.</p>

<p>Using maven or gradle you will be able to see the project like this</p>

<p><img src="https://dl.dropboxusercontent.com/u/15671111/blog/mule-gradle.png" alt="" /></p>

<h2>Differences between maven and gradle plugin</h2>

<table>
<thead>
<tr>
<th></th>
<th> Maven        </th>
<th> Gradle      </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Provide <code>mule</code> packaging      </td>
<td> Provide <code>mule</code> plugin</td>
</tr>
<tr>
<td></td>
<td> Allow to deploy in local mule standalone </td>
<td> Allow to deploy in local mule standalone, Mule Management Console and Cloudhub</td>
</tr>
<tr>
<td></td>
<td>&ndash;</td>
<td>Allow to run application with a simple command</td>
</tr>
</tbody>
</table>


<h1>Testing</h1>

<p><code>mule-config.xml</code> is placed inside of <code>src/main/app</code>. Here you will find a http service which will return <code>Hello World!</code> message.</p>

<p>```xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?></p>

<!-- created by the gradle mule plugin -->


<p><mule xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.4.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
  http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">
  <flow name="mule-configFlow1" doc:name="mule-configFlow1"></p>

<pre><code>&lt;http:inbound-endpoint exchange-pattern="request-response" host="localhost" port="8081" doc:name="HTTP"/&gt;
&lt;set-payload doc:name="Set Payload" value="Hello World!"/&gt;
</code></pre>

<p>  </flow>
</mule>
```</p>

<p>Then, proceed to write a test for the existing flow. As you can see response will be validated.</p>

<p>```java
import org.hamcrest.core.Is;
import org.junit.Assert;
import org.junit.Test;
import org.mule.api.MuleMessage;
import org.mule.api.client.MuleClient;
import org.mule.tck.junit4.FunctionalTestCase;</p>

<p>public class MuleTest extends FunctionalTestCase {</p>

<p>  @Override
  protected String getConfigFile() {</p>

<pre><code>return "src/main/app/mule-config.xml";
</code></pre>

<p>  }</p>

<p>  @Test
  public void testMuleConfigFlow1() throws Exception {</p>

<pre><code>MuleClient client = muleContext.getClient();
MuleMessage message = client.request("http://localhost:8081", 3000L);
String payload = message.getPayloadAsString();
Assert.assertThat(payload, Is.is("Hello World!"));
</code></pre>

<p>  }
}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
