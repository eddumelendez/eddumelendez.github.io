<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eddú Meléndez]]></title>
  <link href="http://eddumelendez.github.io/atom.xml" rel="self"/>
  <link href="http://eddumelendez.github.io/"/>
  <updated>2014-08-23T21:55:53-05:00</updated>
  <id>http://eddumelendez.github.io/</id>
  <author>
    <name><![CDATA[Eddú Meléndez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Database Change Management: Liquibase]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/11/database-change-management-liquibase/"/>
    <updated>2014-08-11T14:23:31-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/11/database-change-management-liquibase</id>
    <content type="html"><![CDATA[<p>Months ago, I published my first post about <a href="http://eddumelendez.github.io/blog/2014/03/27/database-change-management">Database Change Management</a>. So now, we will review <a href="http://www.liquibase.org">liquibase</a>.</p>

<p>In this blog, I am using sql scripts but there are another ways to work with Liquibase such as XML, YAML, JSON and you have to consider which it is the best option for you.</p>

<h2>What is Liquibase?</h2>

<p>It is an open source project which help us to manage the scripts execution into the database avoiding headaches during the SDLC.</p>

<h2>How liquibase works?</h2>

<p>First of all, you need to add the liquibase dependency and the database dependency (mysql in this post) into the pom.xml
After that, add scripts into the project. Then you must to register the script added into the liquibase configuration xml.</p>

<p>Take into account that if your script is not registered into the liquibase configuration xml, script will not be executed automatically.</p>

<p>Finally you can run the following maven goal <strong>liquibase:update</strong>, which will create two tables into the database. All the scripts executed against the database will be stored into the <strong>databasechangelog</strong> table.</p>

<h2>Pre-requisites</h2>

<ul>
<li>Java</li>
<li>Ant</li>
<li>Maven</li>
</ul>


<h2>Liquibase&rsquo;s Goals</h2>

<p>I will mention just some of them, the list below are the most used by me:</p>

<ul>
<li>rollback: run all the scripts in the <strong>rollback</strong> section inside of dbchangelog configuration file.</li>
<li>tag: mark the last script executed.</li>
<li>update: run all the scripts in the <strong>sqlFile</strong> section inside of dbchangelog configuration file.</li>
<li>updateTestingRollback: allow to test all the scripts. First, do the update and then rollback task. Make sure that all your scripts has a rollback section inside of dbchangelog configuration file. Otherwise, it doesn&rsquo;t work.</li>
</ul>


<blockquote><p><strong>Note:</strong> See all the liquibase&rsquo;s goals <a href="http://www.liquibase.org/documentation/maven/">here</a>.</p></blockquote>

<h2>Demo</h2>

<p>You can download the example <a href="https://github.com/eddumelendez/liquibase-demo">here</a>.</p>

<p>As you can see, there are <strong>param.properties</strong> which have the database connection and another values.</p>

<p><strong>1.</strong> Lets explain some key properties:</p>

<p><strong>changeLogFile</strong>, filename which contains scripts to be executed.</p>

<p><strong>tag</strong>, the name of tag.</p>

<p><strong>2.</strong> Run the ant task <strong>mvn_liquibase_update</strong>, it will create t_user table. Also, script executed will be registered into the <strong>databasechangelog</strong> table.</p>

<p><strong>3.</strong> Now, lets change <strong>changeLogFile</strong> value into the <strong>params.properties</strong> by db.changelog-1.1.0.xml</p>

<p><strong>4.</strong> Run the ant task <strong>mvn_liquibase_update</strong> again, it will create t_role table.</p>

<p>Now, the scripts execution can be automated using Jenkins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zuul: Application Configuration Management]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/11/zuul-application-configuration-management/"/>
    <updated>2014-08-11T01:23:06-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/11/zuul-application-configuration-management</id>
    <content type="html"><![CDATA[<p>Months ago I read the following blog <strong>Mule Meets Zuul</strong> <a href="http://blogs.mulesoft.org/mule-meets-zuul-centralized-properties-management-part-1/">Part I</a> | <a href="http://blogs.mulesoft.org/mule-meets-zuul-centralized-properties-management-part-2/">Part II</a> at <a href="http://blogs.mulesoft.org">Mulesoft&rsquo;s blog</a>
and Zuul caught my attention.</p>

<h2>What is the problem?</h2>

<p>It is a headache when you have to lead with a lot of property files and even worst when you have many environments.</p>

<h2>What is Zuul?</h2>

<p>Zuul is an open source web application which centralize and manage property files configuration.</p>

<h2>What can I do?</h2>

<ul>
<li>Create environments</li>
<li>Upload property files</li>
<li>Create new entries</li>
<li>Clone property files between environments</li>
<li>Group property files in folders</li>
<li>Encryption support</li>
</ul>


<h2>Steps to install Zuul</h2>

<p>Zuul can integrate with Google, Yahoo, LDAP and Active Directory.</p>

<p>Here the steps to set up Zuul against LDAP.</p>

<p><strong>1.</strong> Install <a href="http://docs.adaptivecomputing.com/viewpoint/hpc/Content/topics/1-setup/installSetup/settingUpOpenLDAPOnCentos6.htm">OpenLDAP</a>.</p>

<p><strong>2.</strong> Load this <a href="https://dl.dropboxusercontent.com/u/15671111/blog/ldap-data.ldif">file</a> into the LDAP.</p>

<p><strong>3.</strong> Instal Mysql</p>

<pre><code>    yum install-y mysql-server mysql-devel
    chkconfig mysqld on
    service mysqld start
</code></pre>

<p><strong>4.</strong> Create zuul database.</p>

<p><strong>5.</strong> Download  <a href="http://www.devnull.org/zuul">Zuul</a>.</p>

<p><strong>6.</strong> Set this parameters at:</p>

<p>   <strong>Unix:</strong> %TOMCAT_HOME%/bin/catalina.sh</p>

<pre><code>   export JAVA_OPTS=-Dspring.profiles.active="security-ldap"
</code></pre>

<p>   <strong>Windows:</strong> %TOMCAT_HOME%/bin/catalina.bat</p>

<pre><code>   set JAVA_OPTS=-Dspring.profiles.active="security-ldap"
</code></pre>

<p><strong>7.</strong> Add database driver into <strong>%TOMCAT_HOME%/lib</strong>.</p>

<p><strong>8.</strong> Copy ldap.properties and zuul-data-config.properties from <strong>zuul/WEB-INF/classes/examples</strong> to <strong>%TOMCAT_HOME%/lib</strong>.</p>

<p><strong>9.</strong> Modify ldap.properties</p>

<figure class='code'><figcaption><span>ldap.properties</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">ldap.url</span><span class="o">=</span><span class="s">ldap://localhost:389</span>
</span><span class='line'><span class="na">ldap.username</span><span class="o">=</span><span class="s">cn=Manager,dc=example,dc=com</span>
</span><span class='line'><span class="na">ldap.password</span><span class="o">=</span><span class="s">p@ssw0rd</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_SYSTEM_ADMIN</span><span class="o">=</span><span class="s">CN=Zuul System Admins,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_ADMIN</span><span class="o">=</span><span class="s">CN=Zuul Admins,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_USER</span><span class="o">=</span><span class="s">CN=Zuul Users,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.group.search.base</span><span class="o">=</span><span class="s">OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.group.role.attribute</span><span class="o">=</span><span class="s">entryDN</span>
</span><span class='line'><span class="na">ldap.group.filter</span><span class="o">=</span><span class="s">member={0}</span>
</span><span class='line'><span class="na">ldap.user.search.base</span><span class="o">=</span><span class="s">OU=Users,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.user.search.filter</span><span class="o">=</span><span class="s">uid={0}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>10.</strong> Start tomcat and zuul application will create the database tables using <a href="http://www.liquibase.org">liquibase</a>.</p>

<p>Now, you have Zuul application ready to use.</p>

<p>Create a property in dev environment named <strong>myproperty</strong></p>

<p>Download <a href="https://github.com/eddumelendez/zuul-demo">Zuul demo</a></p>

<p>Now run mvn test, you will get the value from Zuul Service.</p>

<h2>Screenshots</h2>

<p>Create new property option.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-1.png" alt="" /></p>

<p>Create new property view.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-2.png" alt="" /></p>

<p>Property created.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-3.png" alt="" /></p>

<p>Property view and ready to add key and values.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-4.png" alt="" /></p>

<p>Adding new property.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-5.png" alt="" /></p>

<p>Property created in DEV environment.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-6.png" alt="" /></p>

<p>Key Management option.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-7.png" alt="" /></p>

<p>Key Management view.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-8.png" alt="" /></p>

<p>Changing password.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-9.png" alt="" /></p>

<p>You can also create groups.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-10.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: RabbitMQ Essentials]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/07/01/review-rabbitmq-essentials/"/>
    <updated>2014-07-01T00:36:56-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/07/01/review-rabbitmq-essentials</id>
    <content type="html"><![CDATA[<p>I have had the opportunity to have acces to <strong>&ldquo;RabbitMQ Essentials&rdquo;</strong> book published by Packtpub.com. Thanks to the author David Dossot (@ddossot)</p>

<p>Are you interested in Messaging or Message Queuing?</p>

<p>This is a book that you should to read. It has a very good introduction about Messaging concepts, Advanced Message Queuing Protocol (AMQP) description and core concepts. Differences between AMQP and another protocols.</p>

<p>Chapters:</p>

<ul>
<li>Chapter 1: A Rabbit Springs to Life</li>
<li>Chapter 2: Creating an application Inbox</li>
<li>Chapter 3: Switching to Server-push</li>
<li>Chapter 4: Handling Application Logs</li>
<li>Chapter 5: Tweaking Message Delivery</li>
<li>Chapter 6: Smart Message Routing</li>
<li>Chapter 7: Taking RabbitMQ to Production</li>
<li>Chapter 8: Testing and Tracing Applications</li>
<li>Appendix: Message Schemas</li>
</ul>


<p>The book has a lot of examples in different programming languages, most of them in java but also in ruby and python. It also has a section about load test. So, I think that all the topics are covered.</p>

<p>Link: <a href="http://bit.ly/1mASQR1">RabbitMQ Essentials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Inspection With SonarQube]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/04/27/continuous-inspection-with-sonarqube/"/>
    <updated>2014-04-27T23:28:37-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/04/27/continuous-inspection-with-sonarqube</id>
    <content type="html"><![CDATA[<h2>What is Continuous Inspection?</h2>

<p>It is an Agile Practice which tell us inspect the source code in order to find bad habits avoiding issues and bad design in the future.</p>

<h2>What is SonarQube?</h2>

<p><a href="http://www.sonarqube.org/">SonarQube</a> is an Open Source Project based on seven axes:</p>

<ol>
<li>Potential bugs</li>
<li>Coding rules</li>
<li>Tests</li>
<li>Duplications</li>
<li>Comments</li>
<li>Architecture and design</li>
<li>Complexity</li>
</ol>


<p>Sonar (the firstname of this project) or SonarQube (current name) help us to identify points mentioned above.</p>

<h4>Did you remember this phrase?</h4>

<blockquote><p>Loose coupling and high cohesion.</p></blockquote>

<p>Into the dashboard, you can see RFC (Response For Class) and LCOM4 (Lack of Cohesion Of Methods version 4). Those are related to Coupling and Cohesion respectively.</p>

<p><img src="https://dl.dropboxusercontent.com/u/15671111/blog/sonarqube-RFC.png" alt="" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/15671111/blog/sonarqube-LCOM4.png" alt="" /></p>

<p><strong>Code Review</strong> and <strong>Pair Programming</strong> are practices that we need to do in order to support Continuous Inspection Process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloudbees]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/04/27/cloudbees/"/>
    <updated>2014-04-27T21:49:32-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/04/27/cloudbees</id>
    <content type="html"><![CDATA[<p>Time ago, I was looking for subversion server. I could have used Google code, but I had a problem with that, it is a public repository. So, I found <strong>Cloudbees</strong> and meets my expectation.</p>

<h2>What is Paas?</h2>

<p>Nowadays, we should know about <em>Platform as a Service</em>. But, it doesn&rsquo;t matter if you don&rsquo;t know it. You can learn something new everyday. Briefly, PaaS is a environment on cloud based on products from the providers. So, Cloudbees is a <strong>PaaS</strong>. In this case, Cloudbees was built using Sonar, Jenkins, Subversion, Git, MySQL, Tomcat and many other tools.</p>

<h2>What can you find on Cloudbees?</h2>

<p>You can find several products such as I have mentioned before, besides JFrog, SendGrid, AppDynamics, New Relic, Mongo HQ.</p>

<p>I suggest to use it at university projects. Sometimes we need to application server, and using Cloudbees we can have source control management, database, application server, maven repository. It is a good place to start teaching about <em>Continuous Integration</em>, <em>Continuous Delivery</em>.</p>

<p><strong>Note:</strong> We have to consider that Cloudbees provide a limit space, if you want more space you have to buy.
Cloudbees, is a good service. And I hope you can use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Change Management]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/03/27/database-change-management/"/>
    <updated>2014-03-27T22:15:11-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/03/27/database-change-management</id>
    <content type="html"><![CDATA[<p>First, I have some questions to you:</p>

<ol>
<li>Do you have scripts into the Source Control Management?</li>
<li>Do you know which scripts have been executed into the database?</li>
<li>Do you write scripts for rollback?</li>
<li>Are DBAs involve in your development process?</li>
<li>Tell me, how do you manage your database changes?</li>
</ol>


<p>If I were a new team member, I will ask you how to build my database and maybe this would be your answer &ldquo;Let me get a dump from my local database and I will send you&rdquo;. This is valid if your dump has the same structure that production environment but I would not be 100% sure.
Another option is get a backup from production, is not a bad idea if you want to work with real data and solve a specific issue but is not ever the case. So, you must be able to build the database whenever you want.</p>

<h2>What it is my point?</h2>

<p>Continuous Improvement, that is my point. We need to improve our delivery process every day and Database Change Management is something that you can not forget.</p>

<h2>Which is involve?</h2>

<ol>
<li>Every database modification should be written as a delta script.</li>
<li>Add rollback section to your scripts.</li>
<li>Use a naming conventions for your scripts.</li>
<li>If a delta script has already been applied to a database is subsequently modified that subsequent modification will not be applied to the database.</li>
<li>Version Control your scripts.</li>
<li>Maintain a database changelog.</li>
</ol>


<h2>Advantages</h2>

<ol>
<li>Reduce risks during deployments.</li>
<li>Ensure you are executing the right scripts.</li>
<li>You can build a new database.</li>
</ol>


<p>After this, you can research about some tools such as <a href="http://www.liquibase.org/">liquibase</a>, <a href="http://flywaydb.org/">flyway</a> or <a href="http://dbdeploy.com/">dbdeploy</a> in order to automated scripts execution and then promote communication with Database Team in your job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded Database Compatibility]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/03/27/embedded-database-compatibility/"/>
    <updated>2014-03-27T22:01:18-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/03/27/embedded-database-compatibility</id>
    <content type="html"><![CDATA[<p>Some weeks ago I was watching a video about <a href="https://www.youtube.com/watch?v=LYVJ69h76nw">Spring Testing</a>, one thing that called my attention was one feature about embedded databases. It is about compatibility with other databases.</p>

<p>From my side, this feature is really useful because when I started using embedded database in my tests I had to change some types or remove lines in my script due to there are not supported (At that time, I didn&rsquo;t know about it)</p>

<p>Lines below you can see how to setup <strong>MYSQL</strong> compatibility into <strong>HSQL</strong> and <strong>H2</strong> databases, both for testing purpose. Also, you can see the dependencies if you are using maven projects.</p>

<h2>HSQL</h2>

<p>You can review this <a href="http://hsqldb.org/doc/guide/dbproperties-chapt.html">link</a> for more information.</p>

<figure class='code'><figcaption><span>script.sql</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>
</span><span class='line'><span class="k">SET</span> <span class="k">DATABASE</span> <span class="k">SQL</span> <span class="n">SYNTAX</span> <span class="n">MYS</span> <span class="k">TRUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>pom.xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml+evoque'><span class='line'>
</span><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.2.8<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>H2</h2>

<p>You can review this <a href="http://www.h2database.com/html/features.html#compatibility">link</a> for more information.</p>

<figure class='code'><figcaption><span>script.sql</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="k">MODE</span> <span class="n">MySQL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>pom.xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml+evoque'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.h2database<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>h2<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.3.175<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUnit and Mockito]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/03/23/junit-and-mockito/"/>
    <updated>2014-03-23T20:55:45-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/03/23/junit-and-mockito</id>
    <content type="html"><![CDATA[<p>As you maybe know, <a href="http://junit.org/">JUnit</a> is a java testing framework.</p>

<p>Before to talk about our mock framework, we need to be in the same page about what mock is?</p>

<p>Marting Fowler in his article <a href="http://martinfowler.com/articles/mocksArentStubs.html">Mocks are not Stubs</a> said:</p>

<blockquote><p>Mocks are  objects pre-programmed with expectations which form a specification of the calls they are expected to receive.</p></blockquote>

<p><a href="https://code.google.com/p/mockito/">Mockito</a> is the mock framework which we will use.</p>

<p>Lets start with the example, first of all we need to setup our Maven project.</p>

<p><strong>1.</strong> Adding dependencies</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml+evoque'><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>4.10<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.mockito<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>mockito-all<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>1.8.5<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.</strong> In this example, we will use annotations so we have two ways to enable them.</p>

<figure class='code'><figcaption><span>UserServiceImplTest.java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">MockitoJUnitRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>               <span class="c1">//First method to enable mockito&#39;s annotations</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImplTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Before</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">MockitoAnnotations</span><span class="o">.</span><span class="na">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>      <span class="c1">//Second method to enable mockito&#39;s annotations</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note: You can use one of them.</strong></p>

<p><strong>3.</strong> UserServiceImpl HAS-A UserRepository. For that reason, create a UserRepository mock and it will be injected in UserServiceImpl. Then, we can mock UserRepository methods as you can see in step 3.</p>

<figure class='code'><figcaption><span>UserServiceImplTest.java</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImplTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Mock</span>                               <span class="c1">//1. Create UserRepository mock object</span>
</span><span class='line'>  <span class="n">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@InjectMocks</span>                        <span class="c1">//2. Insert UserRepository mock object into UserService</span>
</span><span class='line'>  <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Before</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">//MockitoAnnotations.initMocks(this);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">username</span> <span class="o">=</span> <span class="s">&quot;emelendez&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">Mockito</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(</span><span class="n">username</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;PasswordMock&quot;</span><span class="o">);</span> <span class="c1">//3. Mocking objects</span>
</span><span class='line'>      <span class="n">userService</span><span class="o">.</span><span class="na">validateCredential</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Mockito</span><span class="o">.</span><span class="na">verify</span><span class="o">(</span><span class="n">userRepository</span><span class="o">).</span><span class="na">getPassword</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can download the source code <a href="https://github.com/eddumelendez/mockito">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Am I Writing This Blog?]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/03/23/why-am-i-writing-this-blog/"/>
    <updated>2014-03-23T11:52:28-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/03/23/why-am-i-writing-this-blog</id>
    <content type="html"><![CDATA[<p>I am starting writing this blog because I want to share my knowledge and expertise with everyone. Also, I would like to get feedback from others.</p>

<p>My favourite topics are related to:</p>

<ul>
<li>Agile Practices</li>
<li>Maven</li>
<li>Mule ESB</li>
<li>Spring Framework</li>
</ul>


<p>Also, I will share some books that I have taken into consideration during my continuous improvement process.</p>
]]></content>
  </entry>
  
</feed>
