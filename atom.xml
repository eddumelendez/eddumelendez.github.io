<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Eddú Meléndez]]></title>
  <link href="http://eddumelendez.github.io/atom.xml" rel="self"/>
  <link href="http://eddumelendez.github.io/"/>
  <updated>2015-08-01T00:11:49-05:00</updated>
  <id>http://eddumelendez.github.io/</id>
  <author>
    <name><![CDATA[Eddú Meléndez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git: Useful Commands]]></title>
    <link href="http://eddumelendez.github.io/blog/2016/06/01/git-useful-commands/"/>
    <updated>2016-06-01T01:18:55-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2016/06/01/git-useful-commands</id>
    <content type="html"><![CDATA[<p><code>Git</code> is the most popular Version Control System at this time. There are several benefits like Distributed Version Control System, manage commits by references, save space and so on. And to be honest make my job easy in the software development.</p>

<p>In this post I will share some <code>git</code> useful commands.</p>

<h3>View cool log</h3>

<p>Sometimes we don&rsquo;t need to much detail in our log and it is enough reading the commit&rsquo;s title. Also we would like to know ref names of commits. Additionally, we would like to display branching graph.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git log --oneline --decorate --graph
</span></code></pre></td></tr></table></div></figure>


<p>As a result, you can see the commit hash towards to the commit&rsquo;s title. Also, you can see branches graph.</p>

<p><img src="https://dl.dropboxusercontent.com/u/15671111/blog/git-comman%20-%20log%20oneline%20decorate%20graph.png" alt="" /></p>

<h3>View pending commits to push</h3>

<p>Sometimes, I thought that have been sent my commits to the central repository. An easy way to know how many commits are in your local repository and ready to push them is with the command below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git log --oneline origin/master.. master
</span></code></pre></td></tr></table></div></figure>


<h3>Rebase</h3>

<p>Put your local commits to the top and pull all the changes in the repository avoiding conflicts with the central repository.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull --rebase origin master
</span></code></pre></td></tr></table></div></figure>


<p>You can also rebase in interactive mode, which allow to choose actions like <code>pick</code>, <code>reword</code>, <code>edit</code>, <code>squash</code>, <code>fixup</code>, <code>exec</code>. To know about this command check this <a href="https://help.github.com/articles/about-git-rebase/#commands-available-while-rebasing">link</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git rebase -i origin/master
</span></code></pre></td></tr></table></div></figure>


<h3>Push specific commit</h3>

<p>If you have one pending commit and start in a new feature you maybe wondering how to push your commit without revert all the changes you started. You just need the commit hash and execute the command below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push origin <span class="nb">hash</span>:master
</span></code></pre></td></tr></table></div></figure>


<h3>Get commit from another branch</h3>

<p>Imagine you are working in a new feature with your team in a different branch than master. Then, a team member add a cool functionality which will be util in production right now. You can not wait and want to deploy this functionality in production tonight.</p>

<p>Using the command below you just need to know the commit hash and all changes in that commit will be copy in your current branch. Awesome, isn&rsquo;t it?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git cherry-pick <span class="nb">hash</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Amend</h3>

<p>Every day, as a developers we are introducing new code. After few changes we can save our work, but, wait!!! It&rsquo;s not the end we need to do more changes to finish the feature. Git add <code>amend</code> which allow us to override the last commit. <strong>NOTE: which has not been pushed to the central repository.</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit --amend --reuse-message<span class="o">=</span>HEAD
</span></code></pre></td></tr></table></div></figure>


<h1>Building git command alias</h1>

<p>All commands mentioned above can be too large or complex to remember them but you can use <code>alias</code> to give a easy name for you.</p>

<p>Command below will store <code>log --oneline --decorate --graph</code> in the alias <code>logd</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global alias.lodg <span class="sb">`</span>log --oneline --decorate --graph<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>After setup your new alias. You can use <code>git lodg</code> instead <code>git log --oneline --decorate --graph</code> and the result will be the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring 4.2.0: SpringClassRule and SpringMethodRule]]></title>
    <link href="http://eddumelendez.github.io/blog/2015/08/01/spring-4-2-0-springclassrule-and-springmethodrule/"/>
    <updated>2015-08-01T00:10:00-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2015/08/01/spring-4-2-0-springclassrule-and-springmethodrule</id>
    <content type="html"><![CDATA[<p>Spring Framework 4.2.0.RELEASE has arrived and two new rules have been added to spring-framework project <code>SpringClassRule</code> and <code>SpringMethodRule</code>.</p>

<p>In spring applications we have used <code>SpringJUnit4ClassRunner</code> for a long time in our tests but <code>JUnit</code> only support one Runner at the time, in order to allow integration between spring with other Runners like <code>org.junit.runners.Parameterized</code> we can use these new classes instead of <code>@RunWith(SpringJUnit4ClassRunner.class)</code></p>

<ul>
<li><p><code>SpringClassRule</code> enable the following annotations <code>@BeforeClass</code>, <code>@AfterClass</code>, <code>@ProfileValueSourceConfiguration</code>, <code>@IfProfileValue</code>.</p></li>
<li><p><code>SpringMethodRule</code> enable the following annotations <code>@Before</code>, <code>@After</code>, <code>@Repeat</code>, <code>@Timeout</code>, <code>@ProfileValueSourceConfiguration</code>, <code>@IfProfileValue</code>.</p></li>
</ul>


<p>Test using classic <code>SpringJUnit4ClassRunner</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">io</span><span class="o">.</span><span class="na">eddumelendez</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringJUnit4ClassRunner</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test using new rules <code>SpringClassRule</code> and <code>SpringMethodRule</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">io</span><span class="o">.</span><span class="na">eddumelendez</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.ClassRule</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Rule</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.rules.SpringClassRule</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.rules.SpringMethodRule</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ClassRule</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">SpringClassRule</span> <span class="n">SPRING_CLASS_RULE</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SpringClassRule</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Rule</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="n">SpringMethodRule</span> <span class="n">springMethodRule</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SpringMethodRule</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both have the same effect in your test and you can use them in different context.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java EE: MVC 1.0]]></title>
    <link href="http://eddumelendez.github.io/blog/2015/06/01/java-ee-mvc-1-0/"/>
    <updated>2015-06-01T22:16:32-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2015/06/01/java-ee-mvc-1-0</id>
    <content type="html"><![CDATA[<p>Java EE is evolving and there are a lot of news coming in Java EE8. Java EE is constantly adopting standards and now is time to the new spec <code>MVC 1.0</code> (JSR-371) is part of Java EE8 which will be released in 2016.</p>

<p>If you are thinking on a new concept, let me tell that you are wrong MVC is Model, View, Controller the pattern for web frameworks and you already knew it.</p>

<p>Now, UI frameworks has been categorized in:</p>

<ul>
<li>Action-based, like MVC.</li>
<li>Component-based, like JSF.</li>
</ul>


<p>But, I am pretty sure that you have the following question <a href="http://www.oracle.com/technetwork/articles/java/mvc-2280472.html">Why another MVC framework?</a>.</p>

<p>Complete integration with Jersey (JAX-RS) and obviously with all Java EE ecosystem.</p>

<p>You can see in <a href="https://github.com/spericas/ozark">ozark</a> github repository the RI (Reference Implementation) to the frameworks below:</p>

<ul>
<li>Freemaker</li>
<li>Handlebars</li>
<li>Mustache</li>
<li>Thymeleaf</li>
<li>Velocity</li>
</ul>


<p><strong>Note:</strong> Glassfish 4.1, is the only Server Application which support this specification at the time I am writing this post.</p>

<p>To use it in your projects add the this dependency in your pom.xml (if you are using maven)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>javax.mvc<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>javax.mvc-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.0-edr1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>JSP&rsquo;s are located at <code>src/main/webapp/WEB-INF/views</code> folder.</p>

<p>There are 4 ways to return a view:</p>

<ol>
<li>Void method with <code>@View</code> and the jsp name.</li>
<li>Return <code>String</code> with the jsp name.</li>
<li>Return <code>Viewable</code> class with the jsp name.</li>
<li>Return <code>Response</code> class from JAX-RS to return the jsp name as a entity.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="nd">@Path</span><span class="o">(</span><span class="s">&quot;book&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Produces</span><span class="o">(</span><span class="s">&quot;text/html&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@GET</span>
</span><span class='line'>  <span class="nd">@View</span><span class="o">(</span><span class="s">&quot;books.jsp&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">viewBooks</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GET</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">viewBookInfo</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;book.jsp&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GET</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Viewable</span> <span class="nf">viewBookDetail</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nf">Viewable</span><span class="o">(</span><span class="s">&quot;bookDetail.jsp&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@GET</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Response</span> <span class="nf">viewBook</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">Response</span><span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="n">Response</span><span class="o">.</span><span class="na">Status</span><span class="o">.</span><span class="na">OK</span><span class="o">).</span><span class="na">entity</span><span class="o">(</span><span class="s">&quot;book.jsp&quot;</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you can check the code of this API take a look the github repository <a href="https://github.com/spericas/mvc-spec">MVC 1.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Analysis With JArchitect]]></title>
    <link href="http://eddumelendez.github.io/blog/2015/05/27/code-analysis-with-jarchitect/"/>
    <updated>2015-05-27T00:02:29-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2015/05/27/code-analysis-with-jarchitect</id>
    <content type="html"><![CDATA[<p>Code Analysis is a really important stage in our projects, we need to take a look the software healthy every day. In this blog, <code>JArchitect</code> is the Code Analysis tool for Java projects that we are going to talk about.</p>

<p>Months ago I have the chance to get a JArchitect&rsquo;s license- thanks to the <code>CodeGears</code> team for this license. Then, I started taking a look how it works.</p>

<ul>
<li>Code Quality Metrics</li>
<li>Graph Dependency</li>
<li>Dependency Cycle</li>
</ul>


<h2>Features</h2>

<p>A really nice feature is that you can use <code>CQLinq</code> to build query over Java code. To learn more about <code>CQLinq</code> syntax check <a href="http://www.jarchitect.com/Doc_CQLinq_Syntax">here</a>. Also, allow you to create your own rules.</p>

<p>Modern projects use build tools to package their artifacts (jar, war, etc) So the integration with modern build tools such as <code>gradle</code> and <code>maven</code> is possible, you can follow the online documentation to set up.</p>

<ul>
<li><a href="http://www.jarchitect.com/Doc_Ant">Ant Integration</a></li>
<li><a href="http://www.jarchitect.com/Doc_Maven">Maven Integration</a></li>
<li><a href="http://www.jarchitect.com/Doc_Gradle">Gradle Integration</a></li>
</ul>


<p>Also, Continuous Integration process is real using JArchitect.</p>

<ul>
<li><a href="http://www.jarchitect.com/Doc_CI_Jenkins">Jenkins Integration</a></li>
<li><a href="http://www.jarchitect.com/Doc_CI_TeamCity">TeamCity Integration</a></li>
</ul>


<p>About <code>Code Coverage</code>, <code>cobertura</code> is the only technology supported by JArchitect at this moment. These metrics can be getting from xml files, but we need to generate reports previous to the code analysis.</p>

<p>Another great integration is that we can enrich our analysis with existing tools in the market like <code>CheckStyle</code>, <code>FindBugs</code>, <code>PMD</code>.</p>

<p>Languages that already run in the JVM can be analyze by JArchitect like <code>scala</code>, <code>groovy</code>, <code>clojure</code>.</p>

<p>For <code>Open Source</code> contributor there are good news. You can get your own free copy of <code>JArchitect</code>. How to apply? Check this <a href="http://www.jarchitect.com/JArchitectForOSS">link</a> for more information.</p>

<p>Analysis Bar<img src="https://dl.dropboxusercontent.com/u/15671111/blog/jarchitect%20-%20analysis.png" alt="" /></p>

<p>Graph Dependency<img src="https://dl.dropboxusercontent.com/u/15671111/blog/jarchitect%20-%20graph%20dependency.png" alt="" /></p>

<p>Report- Metrics<img src="https://dl.dropboxusercontent.com/u/15671111/blog/jarchitect%20-%20metrics.png" alt="" /></p>

<p>Report- Rules Violated<img src="https://dl.dropboxusercontent.com/u/15671111/blog/jarchitect%20-%20rules%20violated.png" alt="" /></p>

<p>CQLinq sentence<img src="https://dl.dropboxusercontent.com/u/15671111/blog/jarchitect-%20cqlinq.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving Maven Projects]]></title>
    <link href="http://eddumelendez.github.io/blog/2015/04/14/improving-maven-projects/"/>
    <updated>2015-04-14T22:17:16-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2015/04/14/improving-maven-projects</id>
    <content type="html"><![CDATA[<p>During long time <strong>maven</strong> has been the defacto build tool and dependency management for java projects. Since previous version some cool things has been added by plugins but now maven has been enriched with new features learning from the others.</p>

<ul>
<li><a href="#lifecycle">Maven Lifecycle</a></li>
<li><a href="#polyglot">Maven Polyglot</a></li>
<li><a href="#wrapper">Maven Wrapper</a></li>
</ul>


<p>All these new stuff is thanks to <a href="http://takari.io/">Takiri</a> which is lead by Jason van Zyl (<a href="https://twitter.com/jvanzyl">@jvanzyl</a>) the maven&rsquo;s father.</p>

<p>Requirements:</p>

<ul>
<li>Maven 3.3.1</li>
<li>Java 7</li>
</ul>


<p><a name="lifecycle"></a></p>

<h2>Maven Lifecycle</h2>

<p>Avoid the re-compilation if there are no changes in the source code. Just is needed two simple steps to enable this awesome feature. Save your time!!!</p>

<p><strong>1.</strong> Add plugin below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>io.takari.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>takari-lifecycle-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;extensions&gt;</span>true<span class="nt">&lt;/extensions&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>2.</strong> Switch your current <code>packaging</code> from <code>jar</code> to <code>takari-jar</code>.</p>

<p>You can see the log to see if the plugin take effect. If you have compiled previously and you do again with after these configuration then no compilation will be done but if there are any change in your source code then it will compile again.</p>

<p><a name="polyglot"></a></p>

<h2>Maven Polyglot</h2>

<p>Build <code>pom</code> file in xml format is verbose. Now, you can build your pom in different languages: atom, clojure, groovy, ruby, scala, yaml. And take advantage of each one.</p>

<p>Pre-requisite:</p>

<ol>
<li>Inside the project create <code>.mvn/extensions.xml</code> file, where language dependency will take place:</li>
</ol>


<h3>Atom</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;extensions&gt;</span>
</span><span class='line'>  <span class="nt">&lt;extension&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>io.takari.polyglot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>polyglot-atom<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>0.1.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/extension&gt;</span>
</span><span class='line'><span class="nt">&lt;/extensions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Clojure:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;extensions&gt;</span>
</span><span class='line'>  <span class="nt">&lt;extension&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>io.takari.polyglot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>polyglot-clojure<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>0.1.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/extension&gt;</span>
</span><span class='line'><span class="nt">&lt;/extensions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Groovy</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;extensions&gt;</span>
</span><span class='line'>  <span class="nt">&lt;extension&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>io.takari.polyglot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>polyglot-groovy<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>0.1.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/extension&gt;</span>
</span><span class='line'><span class="nt">&lt;/extensions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Ruby</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;extensions&gt;</span>
</span><span class='line'>  <span class="nt">&lt;extension&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>io.takari.polyglot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>polyglot-ruby<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>0.1.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/extension&gt;</span>
</span><span class='line'><span class="nt">&lt;/extensions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scala</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;extensions&gt;</span>
</span><span class='line'>  <span class="nt">&lt;extension&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>io.takari.polyglot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>polyglot-scala<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>0.1.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/extension&gt;</span>
</span><span class='line'><span class="nt">&lt;/extensions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Yaml</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;extensions&gt;</span>
</span><span class='line'>  <span class="nt">&lt;extension&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>io.takari.polyglot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>polyglot-yaml<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>0.1.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/extension&gt;</span>
</span><span class='line'><span class="nt">&lt;/extensions&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Would you like to migrate your xml to any other language? You can do it running the command below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn io.takari.polyglot:polyglot-translate-plugin:translate -Dinput=pom.xml -Doutput=pom.{format}
</span></code></pre></td></tr></table></div></figure>


<p>Where <code>format</code> could be <code>atom</code>, <code>clj</code>, <code>groovy</code>, <code>rb</code>, <code>scala</code> and <code>yml</code>.</p>

<p><a name="wrapper"></a></p>

<h2>Maven Wrapper</h2>

<p>Share projects is common and sometimes we have specific version from our build tool. Now, you don&rsquo;t need to ask to your friend which maven version you need if the maven project use <code>maven-wrapper</code>. To do that, you just need to run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn -N io.takari:maven:wrapper
</span></code></pre></td></tr></table></div></figure>


<p>Now you can make a build <code>mvnw clean install</code>. If you like to see which maven version you will download take a look at <code>.mvn/wrapper/maven-wrapper.properties</code> inside your project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Advice to (Junior) Developers About Their Career]]></title>
    <link href="http://eddumelendez.github.io/blog/2015/01/06/my-advice-to-junior-developers-about-their-career-spanish-version/"/>
    <updated>2015-01-06T00:43:59-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2015/01/06/my-advice-to-junior-developers-about-their-career-spanish-version</id>
    <content type="html"><![CDATA[<h2>Mi consejo a desarrolladores (juniors) sobre su carrera</h2>

<p>&ldquo;Los últimos meses he conocido jóvenes desarrolladores que están buscando su primer trabajo o están todavia tratando de obtener su grado de bachiller. Muchos de ellos pidieron darles un consejo sobre cuales serian sus primeros pasos en la carrera de desarrollo de software. Se ve bien ver jóvenes preocuparse sobre sus carreras. No recuerdo que los chicos de mi edad tuvieran esa mentalidad. Asumo que fue la crisis económica la que hizo que todos estos jóvenes actúen con bastante madurez, pero me gusta.</p>

<p>En este post resumo mi consejo a todos estos jóvenes y desarrolladores ambiciosos. No se deje engañar por la palabra jóven. Incluso si ustedes tienen 10 años, son todavía jóvenes. Al menos yo me siento así.</p>

<p>Lo primero que ellos me preguntaron fue que lenguaje o framework deberían aprender primero. Pude dar miles de diferentes respuestas pero la clave no está en saber qué lenguaje ya conoces sino la rapidez con la que se puede aprender uno nuevo. Piensas que a Google, Ebay ó Amazon les importa si eres un experto en Java ó JEE ó JavaScript? Envía tu CV y ten una entrevista con algunos chicos <em>techie</em>.</p>

<p>Las compañías de IT deben contratar personajes y entrenar sus habilidades. Ok, sé que este no siempre es el caso pero tarde o temprano, alguien te preguntará por la lista de lenguajes de programación o frameworks que conoces. Si eres el personaje de <a href="http://es.wikipedia.org/wiki/Lucky_Luke">&ldquo;Lucky Luke&rdquo;</a> nadie te va a querer en su equipo. La era de los desarrolladores super héroes ha pasado y no veo que regrese nunca. El trabajo en equipo es la clave del éxito y debes estar preparado para eso. Que hay sobre las habilidades? Si no puedes aprender una nueva herramienta, un nuevo lenguaje de programación o un framework, tu todavía tienes tiempo de ir a otra carrera. Las compañías invertirán en tí para enseñarte nuevas habilidades pero tu debes ser un rápido aprendiz y ser capaz de adoptar nuevas habilidades técnicas en tu trabajo diario. Piensa por un minuto sobre la definición de <em>inversión</em>. Sí, estas en lo correcto. Las compañías no están regalando esas habilidades. Ellos esperan de ti devolver el nuevo conocimiento mediante el aumento de habilidades, productividad y eventualmente el valor de la empresa.</p>

<p>Otra gran idea es ser amigo del OpenSource. Coge una herramienta OpenSource que te guste, que conozcas bien o sólo la encuentres interesante, y unite a la comunidad. Trata de ser activo, y por que no, contribuir al proyecto. No hay nada mejor que mostrarle a los futuros empleadores sobre su trabajo en un proyecto real de código abierto. Por otra parte, abre una cuenta en <a href="https://www.github.com">github</a>, si no lo ha hecho ya. Sube tus proyectos personales. Deje ver a otros que eres un apasionado del desarrollo de software y no solo están considerandolo como un camino para obtener dinero. Y desde que tienes tu cuenta de github lee el código de otros. Es una gran camino para abrir tu mente y aprender nuevas cosas de lenguajes que tu nunca has visto.</p>

<p>Sé ágil! aprende a escribir código limpio, no importa cual es el lenguaje en el que tu escribes tu código. Aprende a respetarte a ti mismo y a los demás desarrolladores de tu equipo. Tu código refleja tu personalidad. Un código desordenado probablemente hara a tus colegas pensar que eres lo mismo en tu vida personal. No querrás escuchar de tus colegas <em>wtf is this?</em>  cuando ellos lean o revisen tu último commit. Aprende <strong>patrones de diseño</strong> y <strong>refactoring</strong>. Puedes aplicarlos en todos los lenguajes populares y seguramente te haran escribir código limpio.</p>

<p>Unete a un Grupo Local y ve a algunas conferencias. Es increíble cuantas cosas aprendes cuando conoces gente de diferentes culturas, orígenes y conocimiento. No tienes nada que perder. Al contrario, puedo asegurarte que estas en una situación ganadora. Sin mencionar que incrementaras tu círculo social y quizás mejorar las opciones de obtener un nuevo trabajo.</p>

<p>Finalmente construye tu marca. Quizás suene como un chico de marketing, pero no lo soy. Haga publicidad de si mismo con sus logros, incluso si es el millonésimo que lo hizo. No importa. Haga saber a los demás sus intereses y que estas activo en el desarrollo de software. Linkedin, Twitter y otras redes profesionales pueden ayudar bastante. Empieza tu blog y publica pequeños artículos sobre tu experiencia y conocimiento, incluso si son para principiantes. Otra vez, no importa!!! Te encontraras publicando mas y mas material avanzado muy pronto.</p>

<p>Y unas cosa mas&hellip; <strong>Nunca pares de aprender nuevas cosas</strong>. Tu decidiste ser un Ingeniero de Software. Este es tu destino. Aprender nuevas cosas constantemente."</p>

<p>  <strong>Source:</strong>
<a href='http://softwaregarden.io/my-advice-to-junior-developers-about-their-career/' class='article-link linkpost'>My Advice to (Junior) Developers About Their&nbsp;Career&nbsp;<span class='post-marker post-marker-after'>→</span></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start With Mule ESB]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/12/31/how-to-start-with-mule-esb/"/>
    <updated>2014-12-31T20:22:57-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/12/31/how-to-start-with-mule-esb</id>
    <content type="html"><![CDATA[<h2>What is an ESB?</h2>

<p>It&rsquo;s a software architecture. ESB or Enterprise Service Bus is a Enterprise Integration Pattern (EIP) solves the <code>spaghetti integration</code> pattern.</p>

<h2>What is Mule ESB?</h2>

<p>It is a Open Source Enterprise Service Bus (ESB), which allow to integrate lot of technologies.</p>

<p>Mule main parts:</p>

<ul>
<li>Component</li>
<li>Transport</li>
<li>Transformers</li>
<li>Inbound/Outbound Routers</li>
</ul>


<p>Mule also provide rich set of:</p>

<ul>
<li>Routers</li>
<li>Transformers</li>
<li>Filters</li>
</ul>


<h2>Using Maven</h2>

<p>Make sure you have set the Mulesoft&rsquo;s repository in <code>settings.xml</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;repositories&gt;</span>
</span><span class='line'>  <span class="nt">&lt;repository&gt;</span>
</span><span class='line'>    <span class="nt">&lt;id&gt;</span>mulesoft-release<span class="nt">&lt;/id&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Mulesoft Release Repository<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url&gt;</span>https://repository.mulesoft.org/nexus/content/repositories/public/<span class="nt">&lt;/url&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/repository&gt;</span>
</span><span class='line'><span class="nt">&lt;/repositories&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, check you have the pluginGroup <code>org.mule.tools</code>.</p>

<p>Now, you are able to run the following command your terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>mvn mule-project-archetype:create -DartifactId=helloWorld -DmuleVersion=3.5.0
</span></code></pre></td></tr></table></div></figure>


<h2>Using Gradle</h2>

<p>Make sure you have a build.gradle file inside the folder with the following content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>buildscript {
</span><span class='line'>    dependencies {
</span><span class='line'>        classpath group: &#39;org.mulesoft.build&#39;, name: &#39;mule-gradle-plugin&#39;, version: &#39;1.1.0&#39;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    repositories {
</span><span class='line'>        maven {
</span><span class='line'>            url &#39;http://repository.mulesoft.org/releases&#39;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>apply plugin: &#39;mule&#39;
</span><span class='line'>
</span><span class='line'>mule.version = &#39;3.5.0&#39;
</span><span class='line'>
</span><span class='line'>mule.muleEnterprise = false
</span></code></pre></td></tr></table></div></figure>


<p>After that you can execute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>gradle initMuleProject
</span></code></pre></td></tr></table></div></figure>


<p>By default, <code>mule.muleEnterprise</code> is set to <code>true</code>.</p>

<p>For more information you can visit <a href="https://github.com/mulesoft-labs/mule-gradle-plugin">mule-gradle-plguin</a> documentation.</p>

<p>Using maven or gradle you will be able to see the project like this</p>

<p><img src="https://dl.dropboxusercontent.com/u/15671111/blog/mule-gradle.png" alt="" /></p>

<h2>Differences between maven and gradle plugin</h2>

<table>
<thead>
<tr>
<th> Maven        </th>
<th> Gradle      </th>
</tr>
</thead>
<tbody>
<tr>
<td> Provide <code>mule</code> packaging      </td>
<td> Provide <code>mule</code> plugin</td>
</tr>
<tr>
<td> Allow to deploy in local mule standalone </td>
<td> Allow to deploy in local mule standalone, Mule Management Console and Cloudhub</td>
</tr>
<tr>
<td>-</td>
<td>Allow to run application with a simple command</td>
</tr>
</tbody>
</table>


<h1>Testing</h1>

<p><code>mule-config.xml</code> is placed inside of <code>src/main/app</code>. Here you will find a http service which will return <code>Hello World!</code> message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="c">&lt;!-- created by the gradle mule plugin --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;mule</span> <span class="na">xmlns:http=</span><span class="s">&quot;http://www.mulesoft.org/schema/mule/http&quot;</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.mulesoft.org/schema/mule/core&quot;</span> <span class="na">xmlns:doc=</span><span class="s">&quot;http://www.mulesoft.org/schema/mule/documentation&quot;</span> <span class="na">xmlns:spring=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="na">version=</span><span class="s">&quot;EE-3.4.2&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd</span>
</span><span class='line'><span class="s">  http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd</span>
</span><span class='line'><span class="s">  http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;flow</span> <span class="na">name=</span><span class="s">&quot;mule-configFlow1&quot;</span> <span class="na">doc:name=</span><span class="s">&quot;mule-configFlow1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;http:inbound-endpoint</span> <span class="na">exchange-pattern=</span><span class="s">&quot;request-response&quot;</span> <span class="na">host=</span><span class="s">&quot;localhost&quot;</span> <span class="na">port=</span><span class="s">&quot;8081&quot;</span> <span class="na">doc:name=</span><span class="s">&quot;HTTP&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;set-payload</span> <span class="na">doc:name=</span><span class="s">&quot;Set Payload&quot;</span> <span class="na">value=</span><span class="s">&quot;Hello World!&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/flow&gt;</span>
</span><span class='line'><span class="nt">&lt;/mule&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, proceed to write a test for the existing flow. As you can see response will be validated.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">org.hamcrest.core.Is</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Assert</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mule.api.MuleMessage</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mule.api.client.MuleClient</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.mule.tck.junit4.FunctionalTestCase</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MuleTest</span> <span class="kd">extends</span> <span class="n">FunctionalTestCase</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">String</span> <span class="nf">getConfigFile</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;src/main/app/mule-config.xml&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Test</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMuleConfigFlow1</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MuleClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">muleContext</span><span class="o">.</span><span class="na">getClient</span><span class="o">();</span>
</span><span class='line'>    <span class="n">MuleMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">request</span><span class="o">(</span><span class="s">&quot;http://localhost:8081&quot;</span><span class="o">,</span> <span class="mi">3000L</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">payload</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">getPayloadAsString</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Assert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">payload</span><span class="o">,</span> <span class="n">Is</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="s">&quot;Hello World!&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[News About Java 8]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/10/30/news-about-java-8/"/>
    <updated>2014-10-30T22:09:19-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/10/30/news-about-java-8</id>
    <content type="html"><![CDATA[<p>Java 8 was released in March and many cool features have arrived in a functional programming style.</p>

<h2>Lambdas</h2>

<p>Lambdas has been used in other programming languages. In <code>java</code>, it&rsquo;s the new way to call <code>anonymous classes</code>.</p>

<p>If you have been Swing developer, you may have seen lot of this code. Example of <code>anonymous class</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">File</span><span class="o">[]</span> <span class="n">directories</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;user.home&quot;</span><span class="o">)).</span><span class="na">listFiles</span><span class="o">(</span><span class="k">new</span> <span class="n">FileFilter</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>           <span class="nd">@Override</span>
</span><span class='line'>           <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">pathname</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">return</span> <span class="n">pathname</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">();</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>       <span class="o">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below, you can see three approaches to use lambdas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">()</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello lamdba&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//pass an object</span>
</span><span class='line'><span class="n">customer</span> <span class="o">-&gt;</span> <span class="n">customer</span><span class="o">.</span><span class="na">getLastname</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//using blocks</span>
</span><span class='line'><span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">String</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">&quot;Hello lambda block&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">greeting</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let write our first example using lambdas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">File</span><span class="o">[]</span> <span class="n">directories</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;user.home&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">listFiles</span><span class="o">((</span><span class="n">File</span> <span class="n">pathname</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">pathname</span><span class="o">.</span><span class="na">isDirectory</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, to move from <code>anonymous class</code> to <code>lambdas</code> there are two steps to do. As you can see the difference is inside of <code>listFiles</code> method. The first part of the lambda is the parameter of the method <code>accept</code> (File pathname) next the arrow (->) and finally the return statement (pathname.isDirectory()). If you want to add extra functionality inside of the lambda you can use block statements.</p>

<h2>Streams API</h2>

<p>The power to manage collections with readable code is here.</p>

<p>I will work in this example with my favourite books. So, we will print in the console only books that contains <em>&ldquo;o&rdquo;</em></p>

<p>Old fashionable way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'><span class="n">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">BookBuilder</span><span class="o">.</span><span class="na">defaultValues</span><span class="o">().</span><span class="na">withId</span><span class="o">(</span><span class="mi">1</span><span class="n">l</span><span class="o">).</span><span class="na">withTitle</span><span class="o">(</span><span class="s">&quot;Angel &amp; Demons&quot;</span><span class="o">).</span><span class="na">withIsbn</span><span class="o">(</span><span class="s">&quot;0-671-02735-2&quot;</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">BookBuilder</span><span class="o">.</span><span class="na">defaultValues</span><span class="o">().</span><span class="na">withId</span><span class="o">(</span><span class="mi">2</span><span class="n">l</span><span class="o">).</span><span class="na">withTitle</span><span class="o">(</span><span class="s">&quot;The Da Vinci Code&quot;</span><span class="o">).</span><span class="na">withIsbn</span><span class="o">(</span><span class="s">&quot;0-385-50420-9&quot;</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">BookBuilder</span><span class="o">.</span><span class="na">defaultValues</span><span class="o">().</span><span class="na">withId</span><span class="o">(</span><span class="mi">3</span><span class="n">l</span><span class="o">).</span><span class="na">withTitle</span><span class="o">(</span><span class="s">&quot;The Lost Symbol&quot;</span><span class="o">).</span><span class="na">withIsbn</span><span class="o">(</span><span class="s">&quot;978-0-385-50422-5&quot;</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="n">books</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">BookBuilder</span><span class="o">.</span><span class="na">defaultValues</span><span class="o">().</span><span class="na">withId</span><span class="o">(</span><span class="mi">4</span><span class="n">l</span><span class="o">).</span><span class="na">withTitle</span><span class="o">(</span><span class="s">&quot;Inferno&quot;</span><span class="o">).</span><span class="na">withIsbn</span><span class="o">(</span><span class="s">&quot;978-0-385-53785-8&quot;</span><span class="o">).</span><span class="na">build</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="o">(</span><span class="n">Book</span> <span class="n">book</span> <span class="o">:</span> <span class="n">books</span><span class="o">){</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getTitle</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;o&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">book</span><span class="o">.</span><span class="na">getTitle</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we will use Stream API to rewrite the last part:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">bookNames</span> <span class="o">=</span> <span class="n">books</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">book</span> <span class="o">-&gt;</span> <span class="n">book</span><span class="o">.</span><span class="na">getTitle</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;o&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Book:</span><span class="o">:</span><span class="n">getTitle</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bookNames</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both are doing the same thing but stream offers another great cool features like parallelStream or group function. Additionally, it is readable code and the <code>ciclomatic complexity</code> is reduced.</p>

<p>There are <code>eager</code> and <code>lazy</code> methods inside of Streams API.</p>

<ul>
<li>Eager, return some value or void. Ex: foreach, collect.</li>
<li>Lazy, return another stream. Ex: filter, map.</li>
</ul>


<p><strong>Note:</strong> Streams can be read just once. If you try to work with the same stream twice you will se an exception.</p>

<p>For more infomation about Streams visit the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html">official documentation</a>.</p>

<h2>Default Methods</h2>

<p>In java 8, there are big changes like this. Do you remember interfaces? The place where you define what to do and the class implementation define how.</p>

<p>Default methods has been used in the Java 8 API in order to add new functionality without break existing code. Take a look inside <code>Collection.java</code> you will se that <code>stream()</code> method is a default method.</p>

<p>If you have take a look inside of the API you can see that default method has body or define an action.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Greeting</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="k">default</span> <span class="kt">void</span> <span class="nf">welcome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hi, I am a default method.&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">SpanishGreeting</span> <span class="kd">implements</span> <span class="n">Greeting</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">welcome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hola, soy un método por defecto.&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">EnglishGreeting</span> <span class="kd">implements</span> <span class="n">Greeting</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we call welcome method from SpanishGreeting &ldquo;Hola, soy un método por defecto.&rdquo; will be printed but if you call the method from EnglishGreeting &ldquo;Hi, I am a default method.&rdquo; will be printed.</p>

<h2>Method References</h2>

<p>Everything can be well used or not, in the case of lambdas does nothing, just call the method you can use method references as a easy-to-read approach.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nl">Customer:</span><span class="o">:</span><span class="n">getFirstname</span> <span class="c1">//instead  customer -&gt; customer.getFirstname()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Gradle]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/10/18/introduction-to-gradle/"/>
    <updated>2014-10-18T08:57:01-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/10/18/introduction-to-gradle</id>
    <content type="html"><![CDATA[<p><code>Gradle</code> is called the next generation of <strong>build automation</strong> and <strong>dependency management</strong>. If you have used <code>Ant</code> or <code>Maven</code> you know what that mean.</p>

<p><code>Gradle</code> is based on <code>Groovy</code> and has compatibility with existing tools like <code>Ant</code> and <code>Maven</code>.</p>

<p>The company behind this project is <strong>Gradleware</strong>.</p>

<h6>Build Automation</h6>

<p>As you know, manual tasks are error-prone and tedious. Take in mind that you are working in a project and you have to compile your code&hellip; manually!!! It&rsquo;s boring and you are spending time if you are doing this, Can you imaging running <code>javac</code> command for all your project and dependencies? and after that you need to package the artifact in a <code>jar</code> or <code>war</code>. <code>Ant</code> is the first tool which help developers to write a xml file with all the step to compile, copy, package artifacts. Currently, <code>Maven</code> have standardized all of this and it is charge of to run all the previous tasks and manage the dependencies.</p>

<h6>Dependency Management</h6>

<p>All the projects have dependencies with other projects, years ago and even now is a headache when you are copying and pasting jars inside your projects. To avoid this pain <code>maven</code> and <code>ivy</code> are tools to manage this.</p>

<h2>Getting Started</h2>

<p>It is really cool to see what amazing things you can do with <code>Gradle</code>. It allow us to work with <code>java</code>, <code>groovy</code> and <code>scala</code> projects too.</p>

<p>I really like the easy way to add tasks and manage the dependencies between them. Another good thing is the capability to extend the functionality in <code>Java</code> or <code>Groovy</code>.</p>

<p><code>Gradle</code> have the power run tasks in a new way: Gradle task name abbreviation. For example, if you have created a task called deployInLocalhost&hellip; run <code>gradle dIL</code> instead of<code>gradle deployInLocalhost</code> but make sure you have not another task with the same abbreviation.</p>

<h2>Gradle Wrapper</h2>

<p>I remember when I started using <code>maven</code>, I had downloaded some examples but that was not enough. I had to install <code>maven</code> in my local machine. To avoid install new runtime manually like I did, Gradle Wrapper has arrived to the rescue!!!</p>

<p>As a best practice, it is a good idea to have a wrapper in your project in order to avoid compatibility troubles or any other issues. To apply the wrapper configuration you just need to execute this command <strong>gradle wrapper</strong> and changes to your project will be applied, your wrapper will have the same version as your gradle runtime but you can change it.</p>

<h2>Gradle Daemon</h2>

<p>Gradle take time to up and run when task is executed. If you want to improve the performance, Gradle daemons is here to the rescue&hellip; to active it <strong>gradle &ndash;daemon</strong> and finalize the process <strong>gradle &ndash;stop</strong>. This is useful when you run unit test many times.</p>

<p><strong>Note:</strong> expire after 3 hours.</p>

<h2>Moving from Maven to Gradle</h2>

<p>Currently, you may are working with <code>maven</code> so if you want to try <code>gradle</code> without lost all your maven configuration you can run this command <strong>gradle maven2gradle</strong>. It will create the <code>build.gradle</code> and <code>settings.gradle</code> files with all the dependencies and configuration. Looks great, right? but as a new build automation tool, <code>gradle</code> is growing so if you have additional plugin configuration in your <code>pom.xml</code> this will not be migrated. Your project can live with both.</p>

<h2>Gradle Commands</h2>

<p>I will describe some useful commands but to get more information visit <a href="http://www.gradle.org/docs/current/userguide/gradle_command_line.html">online documentation</a>.</p>

<p>All those commands start with <code>gradle</code>: <code>gradle &lt;command&gt;</code></p>

<p>Commands:</p>

<p><strong>-v or &ndash;version</strong> -> display gradle version.</p>

<p><strong>tasks</strong> -> display tasks related to the project.</p>

<p><strong>-q</strong> -> show tasks output.</p>

<p><strong>-x</strong> or <strong>gradle &ndash;exclude-task</strong> -> exclude the execution of tasks defined.</p>

<p><strong>dependencies</strong> -> display project dependencies and how dependencies were solved.</p>

<p><strong>projects</strong> -> list all the project and subprojects.</p>

<p><strong>properties</strong> -> list all available properties in the project.</p>

<p><strong>-a</strong> or <strong>&ndash;no-rebuild</strong> -> it&rsquo;s used when you won&rsquo;t to rebuild a projects that you didn&rsquo;t change. It works if you are only changing files in a single project.</p>

<p><strong>&ndash;refresh-dependencies</strong> -> refresh project dependencies.</p>

<p><strong>-b</strong> or <strong>&ndash;build-file</strong> -> give the option to choose another build script.</p>

<p><strong>-Dtest.debug test</strong> -> debug test in port 5005</p>

<h2>Recommended Books</h2>

<ul>
<li><a href="http://www.manning.com/muschko/">Gradle in Action</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaOne 2014]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/10/05/javaone-2014/"/>
    <updated>2014-10-05T19:39:37-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/10/05/javaone-2014</id>
    <content type="html"><![CDATA[<p>This year I had the opportunity to attend at JavaOne 2014 in San Francisco, California. It has been a really good experience to me.</p>

<p>In the JavaHub, I could take a look about:</p>

<ul>
<li>Mission Control.</li>
<li>3D Modeling and Printing, using Java FX.</li>
<li>New features in Netbeans, which allow us to migrate from older java versions to java 8 and use Streams.</li>
<li>Internet of Things, using Java Embedded and Raspberry Pi.</li>
<li>Hackergarten, the place where you can contribute in open source projects talking with the experts.</li>
</ul>


<p>Some companies were present in this event such as:
Cloudbees, GitHub, Gradleware, Hazelcast, JetBrains, JFrog, Liferay, O'Reilly, Pivotal, RedHat, Sonatype, Vaadin, Zeroturnaround.</p>

<p>Also, had the chance to meet:</p>

<ul>
<li>Anton Arhipov - <a href="https://twitter.com/antonarhipov">@antonarhipov</a>, JRebel and XRebel Product Manager at Zeroturnaround.</li>
<li>Arun Gupta - <a href="https://twitter.com/arungupta">@arungupta</a>, Director of Developer Advocacy at Red Hat and Author of Java EE 7 Essentials.</li>
<li>Benjamin Muschko - <a href="https://twitter.com/bmuschko">@bmuschko</a>, Principal Engineer at Gradleware and Author of Gradle in Action.</li>
<li>John Ferguson - <a href="https://twitter.com/wakaleo">@wakaleo</a>, Author of Java Power Tools, Jenkins: The Definitive Guide and BDD in Action.</li>
<li>Josh Long - <a href="https://twitter.com/starbuxman">@starbuxman</a>, Spring Developer Advocate.</li>
<li>Phill Weeb - <a href="https://twitter.com/phillip_webb">@phillip_webb</a>, Spring Framework committer and co-lead of Spring Boot.</li>
</ul>


<p>Below, are the sessions I found most interesting:</p>

<p>Sunday</p>

<ul>
<li>Introduction to Java 8: JVM, Language, and Platform.</li>
<li>Starting a JUGgernaut: How to Start and Rapidly Grow Your JUG.</li>
<li>Java Strategy and Technical Keynotes.</li>
</ul>


<p>Monday</p>

<ul>
<li>Hadoop for Java Developers. <a href="http://goo.gl/f2CwNz">http://goo.gl/f2CwNz</a></li>
<li>Next Step in Automation: Elastic Build Environment.</li>
<li>Programming with Streams in Java 8.</li>
</ul>


<p>Tuesday</p>

<ul>
<li>Devoxx4Kids for Parents.</li>
<li>Functional UIs with Java 8 and Vaadin.</li>
<li>Building a Continuous Delivery Pipeline with Gradle and Jenkins.</li>
</ul>


<p>Wednesday</p>

<ul>
<li>Continuous Delivery and Zero Downtime: What Your Architecture Needs to Succeed.</li>
<li>Apache TomEE, Java EE Web Profile, and More on Tomcat.</li>
<li>REST Assured: Hypermedia APIs with Spring MVC.</li>
</ul>


<p>Tuesday</p>

<ul>
<li>The Deploy Factory: Open Source Tools for Java Deployment.</li>
<li>Run Java Applications with Docker on the Raspberry Pi and Other Platforms.</li>
</ul>


<p><strong>Java 8</strong> was the main topic during this party, everyone talked about it. As a Venkat Subramaniam said in his talk:</p>

<blockquote><p>Java arrived later with lambdas but arrived with the desserts (Streams)</p></blockquote>

<p><strong>MVC 1.0</strong> part of <strong>JEE 8</strong> had place at JavaOne&hellip; in my opinion looks like Spring MVC but good to know that good things have been adopted.</p>

<p><strong>JavaOne</strong> is the best place to meet people, authors, learn new things, get stuff like raspberry pi, books and t-shirts and drink a beer.</p>

<p>Duke and me<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-1.jpg" alt="" /></p>

<p>Keynote<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-2.jpg" alt="" /></p>

<p>Duke<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-3.jpg" alt="" /></p>

<p>Duke Awards<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-4.jpg" alt="" /></p>

<p>Josh Long and me<img src="https://dl.dropboxusercontent.com/u/15671111/blog/javaone2014-5.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RAML: Designing an API]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/09/02/raml-designing-an-api/"/>
    <updated>2014-09-02T23:28:31-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/09/02/raml-designing-an-api</id>
    <content type="html"><![CDATA[<p>As a developers, every day we are working coding many APIs.
But, <em>what about design?</em> Sometimes due to the project schedule, too much requirements and even the lack of knowledge about what is <code>REST</code>; developers forget about the design of API.<br/>
Months ago I was surfing on the internet, don&rsquo;t remember where but I read:</p>

<blockquote><p><code>REST</code>is more than work with <code>xml</code> or <code>json</code>.</p></blockquote>

<p>And that&rsquo;s true. So, I researched more about REST and learned lot of things.</p>

<h2>What RAML is?</h2>

<p><code>RESTful API Modeling Language</code> allow us to design, describe, define the API. It&rsquo;s human readable and it is visible to everyone.</p>

<p>That&rsquo;s pretty cool, we can design the API and document as well.</p>

<h2>Security</h2>

<p><code>RAML</code> supports authentication:</p>

<ul>
<li>Basic authentication</li>
<li>Digest authentication</li>
<li>Oauth 1.0</li>
<li>Oauth 2.0</li>
</ul>


<h2>Book Store API</h2>

<p>In the example below, I have designed a Books Store API working my favourite book list.
The API allow me to Create, Read, Update and Delete books. A simple CRUD operation which is represents by HTTP methods.</p>

<table>
<thead>
<tr>
<th><strong>OPERATION</strong> </th>
<th> <strong>HTTP METHODS</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CREATE        </td>
<td> POST</td>
</tr>
<tr>
<td>READ          </td>
<td> GET</td>
</tr>
<tr>
<td>UPDATE        </td>
<td> PUT</td>
</tr>
<tr>
<td>DELETE        </td>
<td> DELETE</td>
</tr>
</tbody>
</table>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#%RAML 0.8
</span><span class='line'>---
</span><span class='line'>title: Book Store API
</span><span class='line'>version: 1.0
</span><span class='line'>baseUri: http://localhost:8081/api
</span><span class='line'>/books:
</span><span class='line'>  displayName: Books Catalog
</span><span class='line'>  get:
</span><span class='line'>    responses:
</span><span class='line'>      200:
</span><span class='line'>        body:
</span><span class='line'>          application/json:
</span><span class='line'>            example: |
</span><span class='line'>                {
</span><span class='line'>                  "bookId": 1,
</span><span class='line'>                  "title": "Angel & Demons",
</span><span class='line'>                  "isbn": "0-671-02735-2",
</span><span class='line'>                  "authors": [
</span><span class='line'>                    "Dan Brown"
</span><span class='line'>                  ]
</span><span class='line'>                },
</span><span class='line'>                {
</span><span class='line'>                  "bookId": 2,
</span><span class='line'>                  "title": "The Da Vinci Code",
</span><span class='line'>                  "isbn": "0-385-50420-9",
</span><span class='line'>                  "authors": [
</span><span class='line'>                    "Dan Brown"
</span><span class='line'>                  ]
</span><span class='line'>                },
</span><span class='line'>                {
</span><span class='line'>                  "bookId": 3,
</span><span class='line'>                  "title": "The Lost Symbol",
</span><span class='line'>                  "isbn": "978-0-385-50422-5",
</span><span class='line'>                  "authors": [
</span><span class='line'>                    "Dan Brown"
</span><span class='line'>                  ]
</span><span class='line'>                },
</span><span class='line'>                {
</span><span class='line'>                  "bookId": 4,
</span><span class='line'>                  "title": "Inferno",
</span><span class='line'>                  "isbn": "978-0-385-53785-8",
</span><span class='line'>                  "authors": [
</span><span class='line'>                    "Dan Brown"
</span><span class='line'>                  ]
</span><span class='line'>                }
</span><span class='line'>  post:
</span><span class='line'>    body:
</span><span class='line'>      application/json:
</span><span class='line'>        example: |  
</span><span class='line'>            {
</span><span class='line'>             "title": "Deception Point",
</span><span class='line'>             "isbn": "0-671-02738-7",
</span><span class='line'>             "authors": [
</span><span class='line'>              "Dan Brown"
</span><span class='line'>             ]
</span><span class='line'>            }
</span><span class='line'>    responses:
</span><span class='line'>      201:
</span><span class='line'>        description: Book has been successfully created.
</span><span class='line'>      409:
</span><span class='line'>        description: Book already exists.
</span><span class='line'>  /{bookId}:
</span><span class='line'>    displayName: Book
</span><span class='line'>    uriParameters:
</span><span class='line'>      bookId:
</span><span class='line'>        description: |
</span><span class='line'>          Book Identifier
</span><span class='line'>        required: true
</span><span class='line'>    get:
</span><span class='line'>      description: Retrieve book-related information.
</span><span class='line'>      responses:
</span><span class='line'>        200:
</span><span class='line'>          body:
</span><span class='line'>            application/json:
</span><span class='line'>              example:  |
</span><span class='line'>                {
</span><span class='line'>                  "bookId": 1,
</span><span class='line'>                  "title": "Angel & Demons",
</span><span class='line'>                  "isbn": "0-671-02735-2",
</span><span class='line'>                  "authors": [
</span><span class='line'>                    "Dan Brown"
</span><span class='line'>                  ]  
</span><span class='line'>                }
</span><span class='line'>    put:
</span><span class='line'>      description: Update book information.
</span><span class='line'>      body:
</span><span class='line'>         application/json:
</span><span class='line'>          example: |  
</span><span class='line'>            {
</span><span class='line'>             "title": "Inferno",
</span><span class='line'>             "isbn": "978-0-385-53785-8",
</span><span class='line'>             "authors": [
</span><span class='line'>              "Dan Brown"
</span><span class='line'>             ]
</span><span class='line'>            }
</span><span class='line'>      responses:
</span><span class='line'>        204:
</span><span class='line'>          description: |
</span><span class='line'>            The book has been successfully updated.
</span><span class='line'>        404:
</span><span class='line'>          description: |
</span><span class='line'>            Unable to find book with that identifier.
</span><span class='line'>    delete:
</span><span class='line'>      description: Remove book from the catalog.
</span><span class='line'>      responses:
</span><span class='line'>        204:
</span><span class='line'>          description: |
</span><span class='line'>            The book has been successfully removed.
</span><span class='line'>        404:
</span><span class='line'>          description: |
</span><span class='line'>            Unable to find book with that identifier.</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the Book Store API have five services:</p>

<ul>
<li>GET <a href="http://localhost:8081/api/books">http://localhost:8081/api/books</a></li>
<li>POST <a href="http://localhost:8081/api/books">http://localhost:8081/api/books</a></li>
<li>GET <a href="http://localhost:8081/api/books/{bookId}">http://localhost:8081/api/books/{bookId}</a></li>
<li>PUT <a href="http://localhost:8081/api/books/{bookId}">http://localhost:8081/api/books/{bookId}</a></li>
<li>DELETE <a href="http://localhost:8081/api/books/{bookId}">http://localhost:8081/api/books/{bookId}</a></li>
</ul>


<p>Learn more about <a href="http://httpstatus.es/">HTTP Status</a></p>

<h2>Platforms and Tools</h2>

<ul>
<li><strong>Mulesoft</strong> provides an <a href="https://anypoint.mulesoft.com/#/signup">API Platform</a> and <a href="http://www.mulesoft.org/documentation/display/current/APIkit+Tutorial">APIkit</a>.</li>
<li><a href="https://github.com/kevinrenskers/raml2html">raml2html</a>, transform raml file to html.</li>
<li><a href="https://github.com/mulesoft/jaxrs-to-raml/">jaxrs-to-raml</a>, generate raml file to existing JAX-RS services. It has been updated today, JAX-RS 2.0 Asynchronous Responses is now supported!!!</li>
</ul>


<p>There are more RAML projects <a href="http://raml.org/projects.html">here</a>.</p>

<h2>Resources</h2>

<p>There are a lot of resources about REST, how to write a good API, some of them are:</p>

<ul>
<li><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf">Roy Thomas Fielding&rsquo;s Dissertation</a></li>
<li><a href="http://blogs.mulesoft.org/designing-restful-api-longevity/">Designing your RESTful API for Longevity</a></li>
<li><a href="https://spring.io/blog/2013/12/02/springone2gx-2013-replay-rest-ful-api-design">SpringOne2GX 2013 Replay: REST-ful API Design</a></li>
<li><a href="http://spring.io/blog/2014/01/14/springone2gx-2013-replay-rest-ful-api-evolution">SpringOne2GX 2013 Replay: REST-Ful API Evolution</a></li>
<li><a href="http://softwaregarden.io/rest-api-best-practices-reloaded/">Rest API Best(?) Practices Reloaded</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: Learning Cypher]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/30/review-learning-cypher/"/>
    <updated>2014-08-30T21:35:39-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/30/review-learning-cypher</id>
    <content type="html"><![CDATA[<p>I have had the change to review another book from <strong>Packtpub.com</strong>. Now, it&rsquo;s time to take a look inside the <a href="https://www.packtpub.com/hardware-and-creative/learning-cypher">Learning Cypher</a>.</p>

<p>Maybe you have heard about <em>NoSQL (Not only SQL)</em> databases. So, one kind is a <code>Graph Databases</code> and <strong>Neo4j</strong> is one of them, which is based on Nodes and Relationships.</p>

<p><strong>What is Cypher?</strong> It is the Query Language used in Neo4j database.</p>

<p>It has a good introduction about Neo4j using embedded database and using the Java API provided by Neo4j.</p>

<p>For example: Imagine that we would like to get all the Users from the graph database. User must be an Node.</p>

<p>First, create an User node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CREATE (a:User {username: "jroe", firstname: "Jane", lastname: "Roe"}),
</span><span class='line'>(b:User {username: "cgarcia", firstname: "Carlos", lastname: "Garcia"}),
</span><span class='line'>(c:User {username: "mweng", firstname: "Mei", lastname: "Weng"})</span></code></pre></td></tr></table></div></figure>


<p>Using the query below you will get all the user information:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MATCH (u:User)
</span><span class='line'>RETURN u</span></code></pre></td></tr></table></div></figure>


<p>But, if we want some fields:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MATCH (u:User)
</span><span class='line'>RETURN u.username, u.firstname, u.lastname</span></code></pre></td></tr></table></div></figure>


<p>There are another example, using WHERE clause</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MATCH (u:User)
</span><span class='line'>WHERE u.username = 'cgarcia'
</span><span class='line'>RETURN u</span></code></pre></td></tr></table></div></figure>


<p>There are more topics using Regex, Join, Sorting and so on. Another interesting topics are:
* Profiling
* Migraton from SQL</p>

<p><strong>Note:</strong> The author mention to <em>spring-data-neo4j</em> module from springframework which make the configuration and integration easy.</p>

<p>I really recommend this book if you want to dive into Neo4j world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins and Liquibase Working Together]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/30/jenkins-and-liquibase-working-together/"/>
    <updated>2014-08-30T02:03:53-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/30/jenkins-and-liquibase-working-together</id>
    <content type="html"><![CDATA[<p>I have talked about <a href="http://eddumelendez.github.io/blog/2014/08/11/database-change-management-liquibase">Database Change Management using Liquibase</a>.
Now, I will talk about the integration with Jenkins CI.</p>

<p>As you can see in the example of my previous post. In the <code>pom.xml</code> there are 3 profiles: <code>update</code>,<code>tag</code> and <code>rollback</code> which will be used by Jenkins.
The profile approach will be useful in our integration.</p>

<p>I am going to use <strong>Cloudbees</strong> (PaaS)</p>

<p><strong>1.</strong> First, you need to have an <a href="http://www.cloudbees.com/">Cloudbees</a> account.</p>

<p><strong>2.</strong> Click on <em>Databases</em> and then click <em>Add Database</em>.</p>

<p><strong>3.</strong> Create a liquibase_demo database.</p>

<p><strong>4.</strong> Click on <em>Builds</em>, Jenkins dashboard will be display.</p>

<p><strong>5.</strong> Create <em>New Job</em>.</p>

<p><strong>6.</strong> Put a name, choose <em>Build a free-style software project</em> option and then click <em>OK</em>.</p>

<p><strong>7.</strong> Now, let start to configure Jenkins&rsquo;s job. You will be able to see the image below
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-1.png" alt="" /></p>

<p><strong>8.</strong> Check <em>This build is parameterized</em> option. Then, click <em>Add Parameter</em>. Add the following parameters: <code>driver</code>, <code>url</code>, <code>username</code>, <code>password</code>, <code>changeLogFile</code>, <code>tag</code> and <code>action</code>.</p>

<p>  <code>driver</code>, <code>url</code>, <code>username</code>, <code>changeLogFile</code>, <code>tag</code> are <strong>String Parameter</strong>
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-2.png" alt="" /></p>

<p>  <code>password</code> is a <strong>Password Parameter</strong>.
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-3.png" alt="" /></p>

<p>  <code>action</code> is a <strong>Choice Parameter</strong> with the following options: <code>update</code>, <code>tag</code> and <code>rollback</code>
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-4.png" alt="" /></p>

<p><strong>9.</strong> Now, lets configure the Source Code Management. In this example, I have published the <a href="https://github.com/eddumelendez/liquibase-demo">demo</a> in GitHub.
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-5.png" alt="" /></p>

<p><strong>10.</strong> Now, go to <strong>Build</strong> section, click on <em>Add build step</em> and choose <em>Invoke top-level Maven targets</em>. Add the maven&rsquo;s goal and properties. Then, <em>Save</em>.</p>

<p>Maven Goal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn install -P$action</span></code></pre></td></tr></table></div></figure>


<p>Maven Properties:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>liquibase.driver=$driver
</span><span class='line'>liquibase.username=$username
</span><span class='line'>liquibase.password=$password
</span><span class='line'>liquibase.url=$url
</span><span class='line'>liquibase.changeLogFile=$changeLogFile
</span><span class='line'>liquibase.rollbackTag=$tag
</span><span class='line'>liquibase.tag=$tag
</span><span class='line'>liquibase.promptOnNonLocalDatabase=false</span></code></pre></td></tr></table></div></figure>


<p>  If you remember, we have created parameters at the beginning of this post which are reusing in this part using <code>$</code> in order to do a dynamic job.
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-6.png" alt="" /></p>

<p><strong>11.</strong> Finally, click <em>Build with parameters</em>, test your job and enjoy.
  <img src="https://dl.dropboxusercontent.com/u/15671111/blog/liquibase-jenkins-7.png" alt="" /></p>

<p>Avoid risks and say good bye to manual tasks. For that reason, I love automation!</p>

<p><strong>Note:</strong> Liquibase can be used inside the java application using <a href="http://www.liquibase.org/documentation/spring.html">spring integration</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Change Management: Liquibase]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/11/database-change-management-liquibase/"/>
    <updated>2014-08-11T14:23:31-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/11/database-change-management-liquibase</id>
    <content type="html"><![CDATA[<p>Months ago, I published my first post about <a href="http://eddumelendez.github.io/blog/2014/03/27/database-change-management">Database Change Management</a>. So now, we will review <a href="http://www.liquibase.org">liquibase</a>.</p>

<p>In this blog, I am using sql scripts but there are another ways to work with Liquibase such as XML, YAML, JSON and you have to consider which it is the best option for you.</p>

<h2>What is Liquibase?</h2>

<p>It is an open source project which help us to manage the scripts execution into the database avoiding headaches during the SDLC.</p>

<h2>How liquibase works?</h2>

<p>First of all, you need to add the liquibase dependency and the database dependency (mysql in this post) into the pom.xml
After that, add scripts into the project. Then you must to register the script added into the liquibase configuration xml.</p>

<p>Take into account that if your script is not registered into the liquibase configuration xml, script will not be executed automatically.</p>

<p>Finally you can run the following maven goal <strong>liquibase:update</strong>, which will create two tables into the database. All the scripts executed against the database will be stored into the <strong>databasechangelog</strong> table.</p>

<h2>Pre-requisites</h2>

<ul>
<li>Java</li>
<li>Ant</li>
<li>Maven</li>
</ul>


<h2>Liquibase&rsquo;s Goals</h2>

<p>I will mention just some of them, the list below are the most used by me:</p>

<ul>
<li><code>rollback</code>: run all the scripts in the <strong>rollback</strong> section inside of dbchangelog configuration file.</li>
<li><code>tag</code>: mark the last script executed.</li>
<li><code>update</code>: run all the scripts in the <strong>sqlFile</strong> section inside of dbchangelog configuration file.</li>
<li><code>updateTestingRollback</code>: allow to test all the scripts. First, do the update and then rollback task. Make sure that all your scripts has a rollback section inside of dbchangelog configuration file. Otherwise, it doesn&rsquo;t work.</li>
</ul>


<blockquote><p><strong>Note:</strong> See all the liquibase&rsquo;s goals <a href="http://www.liquibase.org/documentation/maven/">here</a>.</p></blockquote>

<h2>Demo</h2>

<p>You can download the example <a href="https://github.com/eddumelendez/liquibase-demo">here</a>.</p>

<p>As you can see, there are <strong>param.properties</strong> which have the database connection and another values.</p>

<p><strong>1.</strong> Lets explain some key properties:</p>

<p><strong>changeLogFile</strong>, filename which contains scripts to be executed.</p>

<p><strong>tag</strong>, the name of tag.</p>

<p><strong>2.</strong> Run the ant task <strong>mvn_liquibase_update</strong>, it will create t_user table. Also, script executed will be registered into the <strong>databasechangelog</strong> table.</p>

<p><strong>3.</strong> Now, lets change <strong>changeLogFile</strong> value into the <strong>params.properties</strong> by db.changelog-1.1.0.xml</p>

<p><strong>4.</strong> Run the ant task <strong>mvn_liquibase_update</strong> again, it will create t_role table.</p>

<p>Now, the scripts execution can be automated using Jenkins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zuul: Application Configuration Management]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/08/11/zuul-application-configuration-management/"/>
    <updated>2014-08-11T01:23:06-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/08/11/zuul-application-configuration-management</id>
    <content type="html"><![CDATA[<p>Months ago I read the following blog <strong>Mule Meets Zuul</strong> <a href="http://blogs.mulesoft.org/mule-meets-zuul-centralized-properties-management-part-1/">Part I</a> | <a href="http://blogs.mulesoft.org/mule-meets-zuul-centralized-properties-management-part-2/">Part II</a> at <a href="http://blogs.mulesoft.org">Mulesoft&rsquo;s blog</a>
and Zuul caught my attention.</p>

<h2>What is the problem?</h2>

<p>It is a headache when you have to lead with a lot of property files and even worst when you have many environments.</p>

<h2>What is Zuul?</h2>

<p>Zuul is an open source web application which centralize and manage property files configuration.</p>

<h2>What can I do?</h2>

<ul>
<li>Create environments</li>
<li>Upload property files</li>
<li>Create new entries</li>
<li>Clone property files between environments</li>
<li>Group property files in folders</li>
<li>Encryption support</li>
</ul>


<h2>Steps to install Zuul</h2>

<p>Zuul can integrate with Google, Yahoo, LDAP and Active Directory.</p>

<p>Here the steps to set up Zuul against LDAP.</p>

<p><strong>1.</strong> Install <a href="http://docs.adaptivecomputing.com/viewpoint/hpc/Content/topics/1-setup/installSetup/settingUpOpenLDAPOnCentos6.htm">OpenLDAP</a>.</p>

<p><strong>2.</strong> Load this <a href="https://dl.dropboxusercontent.com/u/15671111/blog/ldap-data.ldif">file</a> into the LDAP.</p>

<p><strong>3.</strong> Instal Mysql</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install-y mysql-server mysql-devel
</span><span class='line'>chkconfig mysqld on
</span><span class='line'>service mysqld start</span></code></pre></td></tr></table></div></figure>


<p><strong>4.</strong> Create zuul database.</p>

<p><strong>5.</strong> Download  <a href="http://www.devnull.org/zuul">Zuul</a>.</p>

<p><strong>6.</strong> Set this parameters at:</p>

<p>   <strong>Unix:</strong> %TOMCAT_HOME%/bin/catalina.sh</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export JAVA_OPTS=-Dspring.profiles.active="security-ldap"</span></code></pre></td></tr></table></div></figure>


<p>   <strong>Windows:</strong> %TOMCAT_HOME%/bin/catalina.bat</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set JAVA_OPTS=-Dspring.profiles.active="security-ldap"</span></code></pre></td></tr></table></div></figure>


<p><strong>7.</strong> Add database driver into <strong>%TOMCAT_HOME%/lib</strong>.</p>

<p><strong>8.</strong> Copy ldap.properties and zuul-data-config.properties from <strong>zuul/WEB-INF/classes/examples</strong> to <strong>%TOMCAT_HOME%/lib</strong>.</p>

<p><strong>9.</strong> Modify ldap.properties</p>

<figure class='code'><figcaption><span>ldap.properties</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='properties'><span class='line'><span class="na">ldap.url</span><span class="o">=</span><span class="s">ldap://localhost:389</span>
</span><span class='line'><span class="na">ldap.username</span><span class="o">=</span><span class="s">cn=Manager,dc=example,dc=com</span>
</span><span class='line'><span class="na">ldap.password</span><span class="o">=</span><span class="s">p@ssw0rd</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_SYSTEM_ADMIN</span><span class="o">=</span><span class="s">CN=Zuul System Admins,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_ADMIN</span><span class="o">=</span><span class="s">CN=Zuul Admins,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.dn.ROLE_USER</span><span class="o">=</span><span class="s">CN=Zuul Users,OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.group.search.base</span><span class="o">=</span><span class="s">OU=Groups,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.group.role.attribute</span><span class="o">=</span><span class="s">entryDN</span>
</span><span class='line'><span class="na">ldap.group.filter</span><span class="o">=</span><span class="s">member={0}</span>
</span><span class='line'><span class="na">ldap.user.search.base</span><span class="o">=</span><span class="s">OU=Users,DC=acme,DC=com</span>
</span><span class='line'><span class="na">ldap.user.search.filter</span><span class="o">=</span><span class="s">uid={0}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>10.</strong> Start tomcat and zuul application will create the database tables using <a href="http://www.liquibase.org">liquibase</a>.</p>

<p>Now, you have Zuul application ready to use.</p>

<p>Create a property in dev environment named <strong>myproperty</strong></p>

<p>Download <a href="https://github.com/eddumelendez/zuul-demo">Zuul demo</a></p>

<p>Now run mvn test, you will get the value from Zuul Service.</p>

<h2>Screenshots</h2>

<p>Create new property option.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-1.png" alt="" /></p>

<p>Create new property view.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-2.png" alt="" /></p>

<p>Property created.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-3.png" alt="" /></p>

<p>Property view and ready to add key and values.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-4.png" alt="" /></p>

<p>Adding new property.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-5.png" alt="" /></p>

<p>Property created in DEV environment.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-6.png" alt="" /></p>

<p>Key Management option.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-7.png" alt="" /></p>

<p>Key Management view.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-8.png" alt="" /></p>

<p>Changing password.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-9.png" alt="" /></p>

<p>You can also create groups.
<img src="https://dl.dropboxusercontent.com/u/15671111/blog/zuul-10.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review: RabbitMQ Essentials]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/07/01/review-rabbitmq-essentials/"/>
    <updated>2014-07-01T00:36:56-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/07/01/review-rabbitmq-essentials</id>
    <content type="html"><![CDATA[<p>I have had the opportunity to have acces to <strong>&ldquo;RabbitMQ Essentials&rdquo;</strong> book published by Packtpub.com. Thanks to the author David Dossot (@ddossot)</p>

<p>Are you interested in Messaging or Message Queuing?</p>

<p>This is a book that you should to read. It has a very good introduction about Messaging concepts, Advanced Message Queuing Protocol (AMQP) description and core concepts. Differences between AMQP and another protocols.</p>

<p>Chapters:</p>

<ul>
<li>Chapter 1: A Rabbit Springs to Life</li>
<li>Chapter 2: Creating an application Inbox</li>
<li>Chapter 3: Switching to Server-push</li>
<li>Chapter 4: Handling Application Logs</li>
<li>Chapter 5: Tweaking Message Delivery</li>
<li>Chapter 6: Smart Message Routing</li>
<li>Chapter 7: Taking RabbitMQ to Production</li>
<li>Chapter 8: Testing and Tracing Applications</li>
<li>Appendix: Message Schemas</li>
</ul>


<p>The book has a lot of examples in different programming languages, most of them in java but also in ruby and python. It also has a section about load test. So, I think that all the topics are covered.</p>

<p>Link: <a href="http://bit.ly/1mASQR1">RabbitMQ Essentials</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Inspection With SonarQube]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/04/27/continuous-inspection-with-sonarqube/"/>
    <updated>2014-04-27T23:28:37-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/04/27/continuous-inspection-with-sonarqube</id>
    <content type="html"><![CDATA[<h2>What is Continuous Inspection?</h2>

<p>It is an Agile Practice which tell us inspect the source code in order to find bad habits avoiding issues and bad design in the future.</p>

<h2>What is SonarQube?</h2>

<p><a href="http://www.sonarqube.org/">SonarQube</a> is an Open Source Project based on seven axes of quality:</p>

<ol>
<li>Potential bugs</li>
<li>Coding rules</li>
<li>Tests</li>
<li>Duplications</li>
<li>Comments</li>
<li>Architecture and design</li>
<li>Complexity</li>
</ol>


<p>Sonar (the firstname of this project) or SonarQube (current name) help us to identify points mentioned above.</p>

<h4>Did you remember this phrase?</h4>

<blockquote><p>Loose coupling and high cohesion.</p></blockquote>

<p>Into the dashboard, you can see RFC (Response For Class) and LCOM4 (Lack of Cohesion Of Methods version 4). Those are related to Coupling and Cohesion respectively.</p>

<p><img src="https://dl.dropboxusercontent.com/u/15671111/blog/sonarqube-RFC.png" alt="" /></p>

<p><img src="https://dl.dropboxusercontent.com/u/15671111/blog/sonarqube-LCOM4.png" alt="" /></p>

<p><strong>Code Review</strong> and <strong>Pair Programming</strong> are practices that we need to do in order to support Continuous Inspection Process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloudbees]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/04/27/cloudbees/"/>
    <updated>2014-04-27T21:49:32-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/04/27/cloudbees</id>
    <content type="html"><![CDATA[<p>Time ago, I was looking for subversion server. I could have used Google code, but I had a problem with that, it is a public repository. So, I found <strong>Cloudbees</strong> and meets my expectation.</p>

<h2>What is Paas?</h2>

<p>Nowadays, we should know about <em>Platform as a Service</em>. But, it doesn&rsquo;t matter if you don&rsquo;t know it. You can learn something new everyday. Briefly, PaaS is a environment on cloud based on products from the providers. So, Cloudbees is a <strong>PaaS</strong>. In this case, Cloudbees was built using Sonar, Jenkins, Subversion, Git, MySQL, Tomcat and many other tools.</p>

<h2>What can you find on Cloudbees?</h2>

<p>You can find several products such as I have mentioned before, besides JFrog, SendGrid, AppDynamics, New Relic, Mongo HQ.</p>

<p>I suggest to use it at university projects. Sometimes we need to application server, and using Cloudbees we can have source control management, database, application server, maven repository. It is a good place to start teaching about <em>Continuous Integration</em>, <em>Continuous Delivery</em>.</p>

<p><strong>Note:</strong> We have to consider that Cloudbees provide a limit space, if you want more space you have to buy.
Cloudbees, is a good service. And I hope you can use it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Change Management]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/03/27/database-change-management/"/>
    <updated>2014-03-27T22:15:11-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/03/27/database-change-management</id>
    <content type="html"><![CDATA[<p>First, I have some questions to you:</p>

<ol>
<li>Do you have scripts into the Source Control Management?</li>
<li>Do you know which scripts have been executed into the database?</li>
<li>Do you write scripts for rollback?</li>
<li>Are DBAs involve in your development process?</li>
<li>Tell me, how do you manage your database changes?</li>
</ol>


<p>If I were a new team member, I will ask you how to build my database and maybe this would be your answer &ldquo;Let me get a dump from my local database and I will send you&rdquo;. This is valid if your dump has the same structure that production environment but I would not be 100% sure.
Another option is get a backup from production, is not a bad idea if you want to work with real data and solve a specific issue but is not ever the case. So, you must be able to build the database whenever you want.</p>

<h2>What it is my point?</h2>

<p>Continuous Improvement, that is my point. We need to improve our delivery process every day and Database Change Management is something that you can not forget.</p>

<h2>Which is involve?</h2>

<ol>
<li>Every database modification should be written as a delta script.</li>
<li>Add rollback section to your scripts.</li>
<li>Use a naming conventions for your scripts.</li>
<li>If a delta script has already been applied to a database is subsequently modified that subsequent modification will not be applied to the database.</li>
<li>Version Control your scripts.</li>
<li>Maintain a database changelog.</li>
</ol>


<h2>Advantages</h2>

<ol>
<li>Reduce risks during deployments.</li>
<li>Ensure you are executing the right scripts.</li>
<li>You can build a new database.</li>
</ol>


<p>After this, you can research about some tools such as <a href="http://www.liquibase.org/">liquibase</a> or <a href="http://flywaydb.org/">flyway</a> in order to automated scripts execution and then promote communication with Database Team in your job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embedded Database Compatibility]]></title>
    <link href="http://eddumelendez.github.io/blog/2014/03/27/embedded-database-compatibility/"/>
    <updated>2014-03-27T22:01:18-05:00</updated>
    <id>http://eddumelendez.github.io/blog/2014/03/27/embedded-database-compatibility</id>
    <content type="html"><![CDATA[<p>Some weeks ago I was watching a video about <a href="https://www.youtube.com/watch?v=LYVJ69h76nw">Spring Testing</a>, one thing that called my attention was one feature about embedded databases. It is about compatibility with other databases.</p>

<p>From my side, this feature is really useful because when I started using embedded database in my tests I had to change some types or remove lines in my script due to there are not supported (At that time, I didn&rsquo;t know about it)</p>

<p>Lines below you can see how to setup <strong>MYSQL</strong> compatibility into <strong>HSQL</strong> and <strong>H2</strong> databases, both for testing purpose. Also, you can see the dependencies if you are using maven projects.</p>

<h2>HSQL</h2>

<p>You can review this <a href="http://hsqldb.org/doc/guide/dbproperties-chapt.html">link</a> for more information.</p>

<figure class='code'><figcaption><span>script.sql</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="k">DATABASE</span> <span class="k">SQL</span> <span class="n">SYNTAX</span> <span class="n">MYS</span> <span class="k">TRUE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>pom.xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml+evoque'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.hsqldb<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>hsqldb<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>2.2.8<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>H2</h2>

<p>You can review this <a href="http://www.h2database.com/html/features.html#compatibility">link</a> for more information.</p>

<figure class='code'><figcaption><span>script.sql</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SET</span> <span class="k">MODE</span> <span class="n">MySQL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>pom.xml</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml+evoque'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>com.h2database<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>h2<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;version&gt;</span>1.3.175<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
